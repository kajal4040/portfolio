import { Injectable } from "@angular/core";
import { Subscription, EMPTY, fromEvent } from "rxjs";
export class ScrollService {
    constructor() {
        this.scrollSub = new Subscription();
        this.resizeSub = new Subscription();
        // set initial value
        this.manageScrollPos();
        // create observable that we can subscribe to from component or directive
        this.scrollObs =
            typeof window !== "undefined" ? fromEvent(window, "scroll") : EMPTY;
        // initiate subscription to update values
        this.scrollSub = this.scrollObs.subscribe(() => this.manageScrollPos());
        // create observable for changes in screen size
        this.resizeObs =
            typeof window !== "undefined" ? fromEvent(window, "resize") : EMPTY;
        // initiate subscription to update values
        this.resizeSub = this.resizeObs.subscribe(() => this.manageScrollPos());
    }
    manageScrollPos() {
        // update service property
        this.pos = typeof window !== "undefined" ? window.pageYOffset : 0;
    }
    ngOnDestroy() {
        this.scrollSub.unsubscribe();
        this.resizeSub.unsubscribe();
    }
}
ScrollService.decorators = [
    { type: Injectable }
];
ScrollService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZzItYW5pbWF0ZS1vbi1zY3JvbGwvc3JjL2xpYi9zY3JvbGwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ3RELE9BQU8sRUFBYyxZQUFZLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUdsRSxNQUFNLE9BQU8sYUFBYTtJQU94QjtRQUhRLGNBQVMsR0FBaUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM3QyxjQUFTLEdBQWlCLElBQUksWUFBWSxFQUFFLENBQUM7UUFHbkQsb0JBQW9CO1FBQ3BCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUV2Qix5RUFBeUU7UUFDekUsSUFBSSxDQUFDLFNBQVM7WUFDWixPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUV0RSx5Q0FBeUM7UUFDekMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQztRQUV4RSwrQ0FBK0M7UUFDL0MsSUFBSSxDQUFDLFNBQVM7WUFDWixPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUV0RSx5Q0FBeUM7UUFDekMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRU8sZUFBZTtRQUNyQiwwQkFBMEI7UUFDMUIsSUFBSSxDQUFDLEdBQUcsR0FBRyxPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMvQixDQUFDOzs7WUFuQ0YsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9uRGVzdHJveSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24sIEVNUFRZLCBmcm9tRXZlbnQgfSBmcm9tIFwicnhqc1wiO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2Nyb2xsU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHNjcm9sbE9iczogT2JzZXJ2YWJsZTxhbnk+O1xuICByZXNpemVPYnM6IE9ic2VydmFibGU8YW55PjtcbiAgcG9zOiBudW1iZXI7XG4gIHByaXZhdGUgc2Nyb2xsU3ViOiBTdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gIHByaXZhdGUgcmVzaXplU3ViOiBTdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gc2V0IGluaXRpYWwgdmFsdWVcbiAgICB0aGlzLm1hbmFnZVNjcm9sbFBvcygpO1xuXG4gICAgLy8gY3JlYXRlIG9ic2VydmFibGUgdGhhdCB3ZSBjYW4gc3Vic2NyaWJlIHRvIGZyb20gY29tcG9uZW50IG9yIGRpcmVjdGl2ZVxuICAgIHRoaXMuc2Nyb2xsT2JzID1cbiAgICAgIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyBmcm9tRXZlbnQod2luZG93LCBcInNjcm9sbFwiKSA6IEVNUFRZO1xuXG4gICAgLy8gaW5pdGlhdGUgc3Vic2NyaXB0aW9uIHRvIHVwZGF0ZSB2YWx1ZXNcbiAgICB0aGlzLnNjcm9sbFN1YiA9IHRoaXMuc2Nyb2xsT2JzLnN1YnNjcmliZSgoKSA9PiB0aGlzLm1hbmFnZVNjcm9sbFBvcygpKTtcblxuICAgIC8vIGNyZWF0ZSBvYnNlcnZhYmxlIGZvciBjaGFuZ2VzIGluIHNjcmVlbiBzaXplXG4gICAgdGhpcy5yZXNpemVPYnMgPVxuICAgICAgdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IGZyb21FdmVudCh3aW5kb3csIFwicmVzaXplXCIpIDogRU1QVFk7XG5cbiAgICAvLyBpbml0aWF0ZSBzdWJzY3JpcHRpb24gdG8gdXBkYXRlIHZhbHVlc1xuICAgIHRoaXMucmVzaXplU3ViID0gdGhpcy5yZXNpemVPYnMuc3Vic2NyaWJlKCgpID0+IHRoaXMubWFuYWdlU2Nyb2xsUG9zKCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBtYW5hZ2VTY3JvbGxQb3MoKTogdm9pZCB7XG4gICAgLy8gdXBkYXRlIHNlcnZpY2UgcHJvcGVydHlcbiAgICB0aGlzLnBvcyA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cucGFnZVlPZmZzZXQgOiAwO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5zY3JvbGxTdWIudW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLnJlc2l6ZVN1Yi51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iXX0=