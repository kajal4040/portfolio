(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng2-animate-on-scroll', ['exports', '@angular/core', 'rxjs', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["ng2-animate-on-scroll"] = {}, global.ng.core, global.rxjs, global.ng.common));
})(this, (function (exports, core, rxjs, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var ScrollService = /** @class */ (function () {
        function ScrollService() {
            var _this = this;
            this.scrollSub = new rxjs.Subscription();
            this.resizeSub = new rxjs.Subscription();
            // set initial value
            this.manageScrollPos();
            // create observable that we can subscribe to from component or directive
            this.scrollObs =
                typeof window !== "undefined" ? rxjs.fromEvent(window, "scroll") : rxjs.EMPTY;
            // initiate subscription to update values
            this.scrollSub = this.scrollObs.subscribe(function () { return _this.manageScrollPos(); });
            // create observable for changes in screen size
            this.resizeObs =
                typeof window !== "undefined" ? rxjs.fromEvent(window, "resize") : rxjs.EMPTY;
            // initiate subscription to update values
            this.resizeSub = this.resizeObs.subscribe(function () { return _this.manageScrollPos(); });
        }
        ScrollService.prototype.manageScrollPos = function () {
            // update service property
            this.pos = typeof window !== "undefined" ? window.pageYOffset : 0;
        };
        ScrollService.prototype.ngOnDestroy = function () {
            this.scrollSub.unsubscribe();
            this.resizeSub.unsubscribe();
        };
        return ScrollService;
    }());
    ScrollService.decorators = [
        { type: core.Injectable }
    ];
    ScrollService.ctorParameters = function () { return []; };

    var AnimateOnScrollDirective = /** @class */ (function () {
        function AnimateOnScrollDirective(elementRef, renderer, scroll) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            this.scroll = scroll;
            this.scrollSub = new rxjs.Subscription();
            this.resizeSub = new rxjs.Subscription();
            // Pixel offset from screen bottom to the animated element to determine the start of the animation
            this.offset = 80; // for scroll Listener
        }
        Object.defineProperty(AnimateOnScrollDirective.prototype, "id", {
            get: function () {
                return this.elementRef.nativeElement.id;
            },
            enumerable: false,
            configurable: true
        });
        AnimateOnScrollDirective.prototype.ngOnInit = function () {
            var _this = this;
            if (!this.animationName) {
                return;
            }
            // default visibility to false
            this.isVisible = false;
            this.useScroll = this.useScroll
                ? this.useScroll
                : this.useScroll === false
                    ? false
                    : true;
            this.threshold = this.threshold ? this.threshold || 0.5 : 0.5;
            // using intersecting observer by default, else fallback to scroll Listener
            if ("IntersectionObserver" in window && this.useScroll) {
                var options = {
                    root: null,
                    threshold: this.threshold,
                    rootMargin: "0px",
                };
                var observer = new IntersectionObserver(function (entries, _) {
                    entries.forEach(function (entry) {
                        if (!entry.isIntersecting) {
                            return;
                        }
                        _this.addAnimationClass();
                    });
                }, options);
                observer.observe(this.elementRef.nativeElement);
                return;
            }
            // subscribe to scroll event using service
            this.scrollSub = this.scroll.scrollObs.subscribe(function () { return _this.manageVisibility(); });
            // subscribe to resize event using service so scrolling position is always accurate
            this.resizeSub = this.scroll.resizeObs.subscribe(function () { return _this.manageVisibility(); });
        };
        AnimateOnScrollDirective.prototype.ngAfterViewInit = function () {
            var _this = this;
            // run visibility check initially in case the element is already visible in viewport
            setTimeout(function () { return _this.manageVisibility(); }, 1);
        };
        AnimateOnScrollDirective.prototype.ngOnDestroy = function () {
            this.scrollSub.unsubscribe();
            this.resizeSub.unsubscribe();
        };
        /**
         * check for visibility of element in viewport to add animation
         *
         * @returns void
         */
        AnimateOnScrollDirective.prototype.manageVisibility = function () {
            if (this.isVisible) {
                // Optimisation; nothing to do if class has already been applied
                return;
            }
            // check for window height, may change with a window resize
            this.getWinHeight();
            // get vertical position for selected element
            this.getOffsetTop();
            // we should trigger the addition of the animation class a little after getting to the element
            var scrollTrigger = this.offsetTop + this.offset - this.winHeight;
            // using values updated in service
            if (this.scroll.pos >= scrollTrigger) {
                this.addAnimationClass();
            }
        };
        /**
         * utility function to mark element visible and add css class
         *
         * @returns void
         */
        AnimateOnScrollDirective.prototype.addAnimationClass = function () {
            // stops execution if no class is provided
            if (!this.animationName) {
                return;
            }
            // mark this element visible, we won't remove the class after this
            this.isVisible = true;
            // use default for animate.css if no value provided
            this.setClass(this.animationName);
        };
        /**
         * utility function to add one or more css classes to element in DOM
         *
         * @param  {string} classes
         * @returns void
         */
        AnimateOnScrollDirective.prototype.setClass = function (classes) {
            var e_1, _a;
            try {
                for (var _b = __values(classes.split(" ")), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var c = _c.value;
                    this.renderer.addClass(this.elementRef.nativeElement, c);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        /**
         * get window height utility function
         *
         * @returns void
         */
        AnimateOnScrollDirective.prototype.getWinHeight = function () {
            this.winHeight = typeof window !== "undefined" ? window.innerHeight : 0;
        };
        /**
         * get offsetTop value for element
         *
         * @returns void
         */
        AnimateOnScrollDirective.prototype.getOffsetTop = function () {
            if (typeof this.elementRef.nativeElement.getBoundingClientRect === "function") {
                var viewportTop = this.elementRef.nativeElement.getBoundingClientRect().top;
                var clientTop = this.elementRef.nativeElement.clientTop;
                // get vertical position for selected element
                this.offsetTop = viewportTop + this.scroll.pos - clientTop;
            }
            else {
                this.offsetTop = 0;
            }
        };
        return AnimateOnScrollDirective;
    }());
    AnimateOnScrollDirective.decorators = [
        { type: core.Directive, args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: "[animateOnScroll]",
                },] }
    ];
    AnimateOnScrollDirective.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core.Renderer2 },
        { type: ScrollService }
    ]; };
    AnimateOnScrollDirective.propDecorators = {
        animationName: [{ type: core.Input }],
        offset: [{ type: core.Input }],
        useScroll: [{ type: core.Input }],
        threshold: [{ type: core.Input }]
    };

    var AnimateOnScrollModule = /** @class */ (function () {
        function AnimateOnScrollModule() {
        }
        AnimateOnScrollModule.forRoot = function () {
            return {
                ngModule: AnimateOnScrollModule,
                providers: [ScrollService],
            };
        };
        return AnimateOnScrollModule;
    }());
    AnimateOnScrollModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [AnimateOnScrollDirective],
                    exports: [AnimateOnScrollDirective],
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AnimateOnScrollDirective = AnimateOnScrollDirective;
    exports.AnimateOnScrollModule = AnimateOnScrollModule;
    exports.ScrollService = ScrollService;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ng2-animate-on-scroll.umd.js.map
