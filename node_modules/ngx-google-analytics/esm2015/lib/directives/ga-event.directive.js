import { Directive, ElementRef, Inject, Input, isDevMode, Optional } from '@angular/core';
import { GaEventCategoryDirective } from './ga-event-category.directive';
import { GoogleAnalyticsService } from '../services/google-analytics.service';
import { NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN } from '../tokens/ngx-google-analytics-settings-token';
import { fromEvent } from 'rxjs';
export class GaEventDirective {
    constructor(gaCategoryDirective, gaService, settings, el) {
        this.gaCategoryDirective = gaCategoryDirective;
        this.gaService = gaService;
        this.settings = settings;
        this.el = el;
        this.gaBind = 'click';
    }
    set gaBind(gaBind) {
        if (this.bindSubscription) {
            this.bindSubscription.unsubscribe();
        }
        this._gaBind = gaBind;
        this.bindSubscription = fromEvent(this.el.nativeElement, gaBind).subscribe(() => this.trigger());
    }
    get gaBind() {
        return this._gaBind;
    }
    ngOnDestroy() {
        if (this.bindSubscription) {
            this.bindSubscription.unsubscribe();
        }
    }
    trigger() {
        try {
            // Observação: não é obrigatório especificar uma categoria, uma etiqueta ou um valor. Consulte Eventos padrão do Google Analytics abaixo.
            // if (!this.$gaCategoryDirective) {
            //   throw new Error('You must provide a gaCategory attribute w/ gaEvent Directive.');
            // }
            if (!this.gaAction && !this.gaEvent) {
                throw new Error('You must provide a gaAction attribute to identify this event.');
            }
            this.gaService
                .event(this.gaAction || this.gaEvent, (this.gaCategoryDirective) ? this.gaCategoryDirective.gaCategory : undefined, this.gaLabel || this.label, this.gaValue, this.gaInteraction);
        }
        catch (err) {
            this.throw(err);
        }
    }
    throw(err) {
        if ((isDevMode() || this.settings.enableTracing) && console && console.warn) {
            console.warn(err);
        }
    }
}
GaEventDirective.decorators = [
    { type: Directive, args: [{
                selector: `[gaEvent]`,
                exportAs: 'gaEvent'
            },] }
];
GaEventDirective.ctorParameters = () => [
    { type: GaEventCategoryDirective, decorators: [{ type: Optional }] },
    { type: GoogleAnalyticsService },
    { type: undefined, decorators: [{ type: Inject, args: [NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,] }] },
    { type: ElementRef }
];
GaEventDirective.propDecorators = {
    gaAction: [{ type: Input }],
    gaLabel: [{ type: Input }],
    label: [{ type: Input }],
    gaValue: [{ type: Input }],
    gaInteraction: [{ type: Input }],
    gaEvent: [{ type: Input }],
    gaBind: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2EtZXZlbnQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uL3Byb2plY3RzL25neC1nb29nbGUtYW5hbHl0aWNzL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2dhLWV2ZW50LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBYSxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbkcsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sK0JBQStCLENBQUM7QUFDdkUsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sc0NBQXNDLENBQUM7QUFFNUUsT0FBTyxFQUFDLG1DQUFtQyxFQUFDLE1BQU0sK0NBQStDLENBQUM7QUFFbEcsT0FBTyxFQUFDLFNBQVMsRUFBZSxNQUFNLE1BQU0sQ0FBQztBQU03QyxNQUFNLE9BQU8sZ0JBQWdCO0lBRTNCLFlBQ3NCLG1CQUE2QyxFQUN6RCxTQUFpQyxFQUNZLFFBQWtDLEVBQ3RFLEVBQWM7UUFIWCx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQTBCO1FBQ3pELGNBQVMsR0FBVCxTQUFTLENBQXdCO1FBQ1ksYUFBUSxHQUFSLFFBQVEsQ0FBMEI7UUFDdEUsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUUvQixJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBYUQsSUFBYSxNQUFNLENBQUUsTUFBYztRQUNqQyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN6QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDckM7UUFFRCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUNuRyxDQUFDO0lBQ0QsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDekIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3JDO0lBQ0gsQ0FBQztJQUVTLE9BQU87UUFDZixJQUFJO1lBQ0YseUlBQXlJO1lBQ3pJLG9DQUFvQztZQUNwQyxzRkFBc0Y7WUFDdEYsSUFBSTtZQUVKLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDbkMsTUFBTSxJQUFJLEtBQUssQ0FBQywrREFBK0QsQ0FBQyxDQUFDO2FBQ2xGO1lBRUQsSUFBSSxDQUFDLFNBQVM7aUJBQ1QsS0FBSyxDQUNKLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLE9BQU8sRUFDN0IsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUM1RSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQzFCLElBQUksQ0FBQyxPQUFPLEVBQ1osSUFBSSxDQUFDLGFBQWEsQ0FDbkIsQ0FBQztTQUNQO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2pCO0lBQ0gsQ0FBQztJQUVTLEtBQUssQ0FBQyxHQUFVO1FBQ3hCLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFO1lBQzNFLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDbkI7SUFDSCxDQUFDOzs7WUF4RUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxXQUFXO2dCQUNyQixRQUFRLEVBQUUsU0FBUzthQUNwQjs7O1lBVk8sd0JBQXdCLHVCQWMzQixRQUFRO1lBYkwsc0JBQXNCOzRDQWV6QixNQUFNLFNBQUMsbUNBQW1DO1lBakI1QixVQUFVOzs7dUJBeUIxQixLQUFLO3NCQUNMLEtBQUs7b0JBQ0wsS0FBSztzQkFDTCxLQUFLOzRCQUNMLEtBQUs7c0JBQ0wsS0FBSztxQkFJTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEluamVjdCwgSW5wdXQsIGlzRGV2TW9kZSwgT25EZXN0cm95LCBPcHRpb25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0dhRXZlbnRDYXRlZ29yeURpcmVjdGl2ZX0gZnJvbSAnLi9nYS1ldmVudC1jYXRlZ29yeS5kaXJlY3RpdmUnO1xuaW1wb3J0IHtHb29nbGVBbmFseXRpY3NTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlcy9nb29nbGUtYW5hbHl0aWNzLnNlcnZpY2UnO1xuaW1wb3J0IHtHYUFjdGlvbkVudW19IGZyb20gJy4uL2VudW1zL2dhLWFjdGlvbi5lbnVtJztcbmltcG9ydCB7TkdYX0dPT0dMRV9BTkFMWVRJQ1NfU0VUVElOR1NfVE9LRU59IGZyb20gJy4uL3Rva2Vucy9uZ3gtZ29vZ2xlLWFuYWx5dGljcy1zZXR0aW5ncy10b2tlbic7XG5pbXBvcnQge0lHb29nbGVBbmFseXRpY3NTZXR0aW5nc30gZnJvbSAnLi4vaW50ZXJmYWNlcy9pLWdvb2dsZS1hbmFseXRpY3Mtc2V0dGluZ3MnO1xuaW1wb3J0IHtmcm9tRXZlbnQsIFN1YnNjcmlwdGlvbn0gZnJvbSAncnhqcyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogYFtnYUV2ZW50XWAsXG4gIGV4cG9ydEFzOiAnZ2FFdmVudCdcbn0pXG5leHBvcnQgY2xhc3MgR2FFdmVudERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBnYUNhdGVnb3J5RGlyZWN0aXZlOiBHYUV2ZW50Q2F0ZWdvcnlEaXJlY3RpdmUsXG4gICAgcHJpdmF0ZSBnYVNlcnZpY2U6IEdvb2dsZUFuYWx5dGljc1NlcnZpY2UsXG4gICAgQEluamVjdChOR1hfR09PR0xFX0FOQUxZVElDU19TRVRUSU5HU19UT0tFTikgcHJpdmF0ZSBzZXR0aW5nczogSUdvb2dsZUFuYWx5dGljc1NldHRpbmdzLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZWw6IEVsZW1lbnRSZWZcbiAgKSB7XG4gICAgdGhpcy5nYUJpbmQgPSAnY2xpY2snO1xuICB9XG5cbiAgcHJpdmF0ZSBiaW5kU3Vic2NyaXB0aW9uPzogU3Vic2NyaXB0aW9uO1xuXG4gIEBJbnB1dCgpIGdhQWN0aW9uOiBHYUFjdGlvbkVudW0gfCBzdHJpbmc7XG4gIEBJbnB1dCgpIGdhTGFiZWw6IHN0cmluZztcbiAgQElucHV0KCkgbGFiZWw6IHN0cmluZztcbiAgQElucHV0KCkgZ2FWYWx1ZTogbnVtYmVyO1xuICBASW5wdXQoKSBnYUludGVyYWN0aW9uOiBib29sZWFuO1xuICBASW5wdXQoKSBnYUV2ZW50OiBHYUFjdGlvbkVudW0gfCBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBfZ2FCaW5kOiBzdHJpbmc7XG5cbiAgQElucHV0KCkgc2V0IGdhQmluZCAoZ2FCaW5kOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5iaW5kU3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLmJpbmRTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9nYUJpbmQgPSBnYUJpbmQ7XG4gICAgdGhpcy5iaW5kU3Vic2NyaXB0aW9uID0gZnJvbUV2ZW50KHRoaXMuZWwubmF0aXZlRWxlbWVudCwgZ2FCaW5kKS5zdWJzY3JpYmUoKCkgPT4gdGhpcy50cmlnZ2VyKCkpO1xuICB9XG4gIGdldCBnYUJpbmQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fZ2FCaW5kO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuYmluZFN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5iaW5kU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHRyaWdnZXIoKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIE9ic2VydmHDp8OjbzogbsOjbyDDqSBvYnJpZ2F0w7NyaW8gZXNwZWNpZmljYXIgdW1hIGNhdGVnb3JpYSwgdW1hIGV0aXF1ZXRhIG91IHVtIHZhbG9yLiBDb25zdWx0ZSBFdmVudG9zIHBhZHLDo28gZG8gR29vZ2xlIEFuYWx5dGljcyBhYmFpeG8uXG4gICAgICAvLyBpZiAoIXRoaXMuJGdhQ2F0ZWdvcnlEaXJlY3RpdmUpIHtcbiAgICAgIC8vICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbXVzdCBwcm92aWRlIGEgZ2FDYXRlZ29yeSBhdHRyaWJ1dGUgdy8gZ2FFdmVudCBEaXJlY3RpdmUuJyk7XG4gICAgICAvLyB9XG5cbiAgICAgIGlmICghdGhpcy5nYUFjdGlvbiAmJiAhdGhpcy5nYUV2ZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG11c3QgcHJvdmlkZSBhIGdhQWN0aW9uIGF0dHJpYnV0ZSB0byBpZGVudGlmeSB0aGlzIGV2ZW50LicpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmdhU2VydmljZVxuICAgICAgICAgIC5ldmVudChcbiAgICAgICAgICAgIHRoaXMuZ2FBY3Rpb24gfHwgdGhpcy5nYUV2ZW50LFxuICAgICAgICAgICAgKHRoaXMuZ2FDYXRlZ29yeURpcmVjdGl2ZSkgPyB0aGlzLmdhQ2F0ZWdvcnlEaXJlY3RpdmUuZ2FDYXRlZ29yeSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHRoaXMuZ2FMYWJlbCB8fCB0aGlzLmxhYmVsLFxuICAgICAgICAgICAgdGhpcy5nYVZhbHVlLFxuICAgICAgICAgICAgdGhpcy5nYUludGVyYWN0aW9uXG4gICAgICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHRoaXMudGhyb3coZXJyKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgdGhyb3coZXJyOiBFcnJvcikge1xuICAgIGlmICgoaXNEZXZNb2RlKCkgfHwgdGhpcy5zZXR0aW5ncy5lbmFibGVUcmFjaW5nKSAmJiBjb25zb2xlICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgY29uc29sZS53YXJuKGVycik7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==