{"version":3,"file":"ngx-google-analytics.js","sources":["../projects/ngx-google-analytics/src/lib/directives/ga-event-category.directive.ts","../projects/ngx-google-analytics/src/lib/tokens/ngx-google-analytics-settings-token.ts","../projects/ngx-google-analytics/src/lib/tokens/ngx-window-token.ts","../projects/ngx-google-analytics/src/lib/tokens/ngx-data-layer-token.ts","../projects/ngx-google-analytics/src/lib/tokens/ngx-gtag-token.ts","../projects/ngx-google-analytics/src/lib/services/google-analytics.service.ts","../projects/ngx-google-analytics/src/lib/directives/ga-event.directive.ts","../projects/ngx-google-analytics/src/lib/directives/ga-event-form-input.directive.ts","../projects/ngx-google-analytics/src/lib/enums/ga-action.enum.ts","../projects/ngx-google-analytics/src/lib/initializers/google-analytics.initializer.ts","../projects/ngx-google-analytics/src/lib/tokens/ngx-google-analytics-router-settings-token.ts","../projects/ngx-google-analytics/src/lib/initializers/google-analytics-router.initializer.ts","../../projects/ngx-google-analytics/src/lib/ngx-google-analytics.module.ts","../projects/ngx-google-analytics/src/lib/ngx-google-analytics-router/ngx-google-analytics-router.module.ts","../../../projects/ngx-google-analytics/src/public_api.ts","../../../projects/ngx-google-analytics/src/ngx-google-analytics.ts"],"sourcesContent":["import { Directive, Input } from '@angular/core';\n\n@Directive({\n  selector: `[gaEvent][gaCategory],\n             [gaCategory]`,\n  exportAs: 'gaCategory'\n})\nexport class GaEventCategoryDirective {\n\n  constructor() { }\n\n  @Input() gaCategory: string;\n\n}\n","import { InjectionToken } from '@angular/core';\nimport { IGoogleAnalyticsSettings } from '../interfaces/i-google-analytics-settings';\n\n/**\n * Provide a Injection Token to global settings.\n */\nexport const NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN = new InjectionToken<IGoogleAnalyticsSettings>('ngx-google-analytics-settings', {\n  factory: () => ({ trackingCode: '', enableTracing: false })\n});\n","import { InjectionToken, inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n/**\n * Check if this environment can access Window object and return window or null if false.\n */\nexport function getWindow(platformId: any) {\n  return (isPlatformBrowser(platformId))\n    ? window : null;\n}\n\n/**\n * Provide DOM Window reference or null if the environment is not a Browser.\n */\nexport const NGX_WINDOW = new InjectionToken<Window>('ngx-window', {\n  providedIn: 'root',\n  factory: () => getWindow(inject(PLATFORM_ID)),\n});\n","import { DataLayer } from '../types/data-layer.type';\nimport { InjectionToken, inject } from '@angular/core';\nimport { NGX_WINDOW } from './ngx-window-token';\n\n/**\n * Check if there is some global function called gtag on Window object, or create an empty function to doesn't brake codes...\n */\nexport function getDataLayerFn(window: Window): DataLayer {\n  return (window)\n    ? window['dataLayer'] = window['dataLayer'] || []\n    : null;\n}\n\n/**\n * Provides an injection token to access Google Analytics DataLayer Collection\n */\nexport const NGX_DATA_LAYER = new InjectionToken<DataLayer>('ngx-data-layer', {\n  providedIn: 'root',\n  factory: () => getDataLayerFn(inject(NGX_WINDOW))\n});\n","import { InjectionToken, inject } from '@angular/core';\nimport { NGX_WINDOW } from './ngx-window-token';\nimport { GtagFn } from '../types/gtag.type';\nimport { DataLayer } from '../types/data-layer.type';\nimport { NGX_DATA_LAYER } from './ngx-data-layer-token';\n\n/**\n * Check if there is some global function called gtag on Window object, or create an empty function to doesn't brake codes...\n */\nexport function getGtagFn(window: Window, dataLayer: DataLayer): GtagFn {\n  return (window)\n    ? window['gtag'] = window['gtag'] || function () {\n        dataLayer.push(arguments as any);\n      }\n    : null;\n}\n\n/**\n * Provides an injection token to access Google Analytics Gtag Function\n */\nexport const NGX_GTAG_FN = new InjectionToken<GtagFn>('ngx-gtag-fn', {\n  providedIn: 'root',\n  factory: () => getGtagFn(inject(NGX_WINDOW), inject(NGX_DATA_LAYER))\n});\n","import { Injectable, Inject, isDevMode } from '@angular/core';\nimport { NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN } from '../tokens/ngx-google-analytics-settings-token';\nimport { IGoogleAnalyticsSettings } from '../interfaces/i-google-analytics-settings';\nimport { GaActionEnum } from '../enums/ga-action.enum';\nimport { DOCUMENT } from '@angular/common';\nimport { NGX_GTAG_FN } from '../tokens/ngx-gtag-token';\nimport { GtagFn } from '../types/gtag.type';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GoogleAnalyticsService {\n\n  private get document(): Document {\n    return this._document;\n  }\n\n  constructor(\n    @Inject(NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN) private readonly settings: IGoogleAnalyticsSettings,\n    @Inject(DOCUMENT) private readonly _document: any,\n    @Inject(NGX_GTAG_FN) private readonly _gtag: GtagFn\n  ) { }\n\n  private throw(err: Error) {\n    if ((this.settings.enableTracing || isDevMode()) && console && console.error) {\n      console.error(err);\n    }\n  }\n\n  /** @todo Change this to `Object.fromEntity()` in the future... */\n  private toKeyValue(map: Map<string, any>): { [param: string]: any } | void {\n    return (map.size > 0)\n      ? Array.from(map).reduce(\n        (obj, [key, value]) => Object.defineProperty(obj, key, { value, enumerable: true }),\n        {}\n      )\n      : undefined;\n  }\n\n  /**\n   * Call native GA Tag\n   */\n  gtag(...args: any[]) {\n    try {\n      this._gtag(...args.filter(x => x !== undefined));\n    } catch (err) {\n      this.throw(err);\n    }\n  }\n\n  /**\n   * Send an event trigger to GA. It is the same as call:\n   * ```js\n   * gtag('event', 'video_auto_play_start', {\n   *   'event_label': 'My promotional video',\n   *   'event_category': 'video_auto_play'\n   * });\n   * ```\n   *\n   * @param action 'video_auto_play_start'\n   * @param category 'video_auto_play'\n   * @param label 'My promotional video'\n   * @param value An value to measure something\n   */\n  event(action: GaActionEnum | string, category?: string, label?: string, value?: number, interaction?: boolean) {\n    try {\n      const opt = new Map<string, any>();\n      if (category) {\n        opt.set('event_category', category);\n      }\n      if (label) {\n        opt.set('event_label', label);\n      }\n      if (value) {\n        opt.set('value', value);\n      }\n      if (interaction !== undefined) {\n        opt.set('interaction', interaction);\n      }\n      const params = this.toKeyValue(opt);\n      if (params) {\n        this.gtag('event', action as string, params);\n      } else {\n        this.gtag('event', action as string);\n      }\n    } catch (error) {\n      this.throw(error);\n    }\n  }\n\n  /**\n   * Send an page view event. This is the same as\n   *\n   * ```js\n   * gtag('config', 'GA_TRACKING_ID', {\n   *   'page_title' : 'Homepage',\n   *   'page_path': '/home'\n   * });\n   * ```\n   *\n   * The tracking ID is injected automatically by Inject Token NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN\n   *\n   * @param path /home\n   * @param title Homepage\n   * @param location '{ page_location }'\n   * @param options '{ ... custom dimentions }'\n   */\n  pageView( path: string, title?: string, location?: string, options?: Object) {\n    try {\n      const opt = new Map<string, any>([['page_path', path]]);\n      if (title) {\n        opt.set('page_title', title);\n      }\n      if (location || this.document) {\n        opt.set('page_location', (location || this.document.location.href));\n      }\n      if (options) {\n        Object\n          .entries(options)\n          .map(([key, value]) => opt.set(key, value));\n      }\n      this.gtag('config', this.settings.trackingCode, this.toKeyValue(opt));\n    } catch (error) {\n      this.throw(error);\n    }\n  }\n\n  /**\n   * Send an event to report a App Page View. It is the same as\n   *\n   * ```js\n   * gtag('event', 'screen_view', {\n   *   'app_name': 'myAppName',\n   *   'screen_name' : 'Home'\n   * });\n   *\n   * ```\n   *\n   * @param screen 'screen_name'\n   * @param appName 'app_name'\n   * @param appId 'app_id'\n   * @param appVersion 'app_version'\n   * @param installerId 'app_installer_id'\n   */\n  appView(screen: string, appName: string, appId?: string, appVersion?: string, installerId?: string) {\n    try {\n      const opt = new Map<string, any>([['screen_name', screen], ['app_name', appName]]);\n      if (appId) {\n        opt.set('app_id', appId);\n      }\n      if (appVersion) {\n        opt.set('app_version', appVersion);\n      }\n      if (installerId) {\n        opt.set('app_installer_id', installerId);\n      }\n      this.gtag('event', 'screen_view', this.toKeyValue(opt));\n    } catch (error) {\n      this.throw(error);\n    }\n  }\n\n  /**\n   * Defines persistent values on GoogleAnalytics\n   *\n   * @see https://developers.google.com/analytics/devguides/collection/gtagjs/setting-values\n   *\n   * ```js\n   * gtag('set', {\n   *   'currency': 'USD',\n   *   'country': 'US'\n   * });\n   * ```\n   */\n  set(...options: Array<any>) {\n    try {\n      this._gtag('set', ...options);\n    } catch (err) {\n      this.throw(err);\n    }\n  }\n\n  /**\n   * Send an event to GA to report an application error. It is the same as\n   *\n   * ```js\n   * gtag('event', 'exception', {\n   *   'description': 'error_description',\n   *   'fatal': false   // set to true if the error is fatal\n   * });\n   * ```\n   *\n   * @param description 'error_description'\n   * @param fatal set to true if the error is fatal\n   */\n  exception(description?: string, fatal?: boolean) {\n    try {\n      const opt = new Map<string, any>();\n      if (description) {\n        opt.set('description', description);\n      }\n      if (fatal) {\n        opt.set('fatal', fatal);\n      }\n      const params = this.toKeyValue(opt);\n      if (params) {\n        this.gtag('event', 'exception', this.toKeyValue(opt));\n      } else {\n        this.gtag('event', 'exception');\n      }\n    } catch (error) {\n      this.throw(error);\n    }\n  }\n}\n","import {Directive, ElementRef, Inject, Input, isDevMode, OnDestroy, Optional} from '@angular/core';\nimport {GaEventCategoryDirective} from './ga-event-category.directive';\nimport {GoogleAnalyticsService} from '../services/google-analytics.service';\nimport {GaActionEnum} from '../enums/ga-action.enum';\nimport {NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN} from '../tokens/ngx-google-analytics-settings-token';\nimport {IGoogleAnalyticsSettings} from '../interfaces/i-google-analytics-settings';\nimport {fromEvent, Subscription} from 'rxjs';\n\n@Directive({\n  selector: `[gaEvent]`,\n  exportAs: 'gaEvent'\n})\nexport class GaEventDirective implements OnDestroy {\n\n  constructor(\n    @Optional() private gaCategoryDirective: GaEventCategoryDirective,\n    private gaService: GoogleAnalyticsService,\n    @Inject(NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN) private settings: IGoogleAnalyticsSettings,\n    private readonly el: ElementRef\n  ) {\n    this.gaBind = 'click';\n  }\n\n  private bindSubscription?: Subscription;\n\n  @Input() gaAction: GaActionEnum | string;\n  @Input() gaLabel: string;\n  @Input() label: string;\n  @Input() gaValue: number;\n  @Input() gaInteraction: boolean;\n  @Input() gaEvent: GaActionEnum | string;\n\n  private _gaBind: string;\n\n  @Input() set gaBind (gaBind: string) {\n    if (this.bindSubscription) {\n      this.bindSubscription.unsubscribe();\n    }\n\n    this._gaBind = gaBind;\n    this.bindSubscription = fromEvent(this.el.nativeElement, gaBind).subscribe(() => this.trigger());\n  }\n  get gaBind(): string {\n    return this._gaBind;\n  }\n\n  ngOnDestroy() {\n    if (this.bindSubscription) {\n      this.bindSubscription.unsubscribe();\n    }\n  }\n\n  protected trigger() {\n    try {\n      // ObservaÃ§Ã£o: nÃ£o Ã© obrigatÃ³rio especificar uma categoria, uma etiqueta ou um valor. Consulte Eventos padrÃ£o do Google Analytics abaixo.\n      // if (!this.$gaCategoryDirective) {\n      //   throw new Error('You must provide a gaCategory attribute w/ gaEvent Directive.');\n      // }\n\n      if (!this.gaAction && !this.gaEvent) {\n        throw new Error('You must provide a gaAction attribute to identify this event.');\n      }\n\n      this.gaService\n          .event(\n            this.gaAction || this.gaEvent,\n            (this.gaCategoryDirective) ? this.gaCategoryDirective.gaCategory : undefined,\n            this.gaLabel || this.label,\n            this.gaValue,\n            this.gaInteraction\n          );\n    } catch (err) {\n      this.throw(err);\n    }\n  }\n\n  protected throw(err: Error) {\n    if ((isDevMode() || this.settings.enableTracing) && console && console.warn) {\n      console.warn(err);\n    }\n  }\n\n}\n","import { Directive, Host, Optional, Input } from '@angular/core';\nimport { GaEventDirective } from './ga-event.directive';\n\n@Directive({\n  selector: `input[gaEvent],\n             select[gaEvent],\n             textarea[gaEvent]`\n})\nexport class GaEventFormInputDirective {\n\n  constructor(\n    @Host() @Optional() protected gaEvent: GaEventDirective\n  ) {\n    this.gaBind = 'focus';\n  }\n\n  @Input() set gaBind(bind: string) {\n    if (this.gaEvent) {\n      this.gaEvent.gaBind = bind;\n    }\n  }\n\n}\n","export enum GaActionEnum {\n  ADD_PAYMENT_INFO = 'add_payment_info',\n  ADD_TO_CART = 'add_to_cart',\n  ADD_TO_WISHLIST = 'add_to_wishlist',\n  BEGIN_CHECKOUT = 'begin_checkout',\n  CHECKOUT_PROGRESS = 'checkout_progress',\n  GENERATE_LEAD = 'generate_lead',\n  LOGIN = 'login',\n  PURCHASE = 'purchase',\n  REFUND = 'refund',\n  REMOVE_FROM_CART = 'remove_from_cart',\n  SEARCH = 'search',\n  SELECT_CONTENT = 'select_content',\n  SET_CHECKOUT_OPTION = 'set_checkout_option',\n  SHARE = 'share',\n  SIGN_UP = 'sign_up',\n  VIEW_ITEM = 'view_item',\n  VIEW_ITEM_LIST = 'view_item_list',\n  VIEW_PROMOTION = 'view_promotion',\n  VIEW_SEARCH_RESULT = 'view_search_results',\n  VIEW_SEARCH_RESULTS = 'view_search_results',\n}\n","import { Provider, APP_INITIALIZER, isDevMode } from '@angular/core';\nimport { NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN } from '../tokens/ngx-google-analytics-settings-token';\nimport { IGoogleAnalyticsSettings } from '../interfaces/i-google-analytics-settings';\nimport { IGoogleAnalyticsCommand } from '../interfaces/i-google-analytics-command';\nimport { NGX_GTAG_FN } from '../tokens/ngx-gtag-token';\nimport { GtagFn } from '../types/gtag.type';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * Provide a DI Configuration to attach GA Initialization at Angular Startup Cycle.\n */\nexport const NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: GoogleAnalyticsInitializer,\n  deps: [\n    NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,\n    NGX_GTAG_FN,\n    DOCUMENT\n  ]\n};\n\n/**\n * Create a script element on DOM and link it to Google Analytics tracking code URI.\n * After that, execute exactly same init process as tracking snippet code.\n */\nexport function GoogleAnalyticsInitializer(\n  settings: IGoogleAnalyticsSettings,\n  gtag: GtagFn,\n  document: Document\n) {\n  return async () => {\n    if (!settings.trackingCode) {\n      if (!isDevMode()) {\n        console.error('Empty tracking code for Google Analytics. Make sure to provide one when initializing NgxGoogleAnalyticsModule.');\n      }\n\n      return;\n    }\n\n    if (!gtag) {\n      if (!isDevMode()) {\n        console.error('Was not possible create or read gtag() fn. Make sure this module is running on a Browser w/ access to Window interface.');\n      }\n\n      return;\n    }\n\n    if (!document) {\n      if (!isDevMode()) {\n        console.error('Was not possible to access Document interface. Make sure this module is running on a Browser w/ access do Document interface.');\n      }\n    }\n\n    // Set default ga.js uri\n    settings.uri = settings.uri || `https://www.googletagmanager.com/gtag/js?id=${settings.trackingCode}`;\n\n    // these commands should run first!\n    settings.initCommands = settings?.initCommands ?? [];\n\n    // assert config command\n    if (!settings.initCommands.find(x => x.command === 'config'))\n    {\n      settings.initCommands.unshift({ command: 'config', values: [ settings.trackingCode ] })\n    }\n\n    // assert js command\n    if (!settings.initCommands.find(x => x.command === 'js'))\n    {\n      settings.initCommands.unshift({ command: 'js', values: [ new Date() ] })\n    }\n\n    for (const command of settings.initCommands) {\n      gtag(command.command, ...command.values);\n    }\n\n    const s: HTMLScriptElement = document.createElement('script');\n    s.async = true;\n    s.src = settings.uri;\n\n    if (settings.nonce) {\n      s.setAttribute('nonce', settings.nonce);\n    }\n\n    const head: HTMLHeadElement = document.getElementsByTagName('head')[0];\n    head.appendChild(s);\n  };\n}\n","import { InjectionToken } from '@angular/core';\nimport { IGoogleAnalyticsRoutingSettings } from '../interfaces/i-google-analytics-routing-settings';\n\n/**\n * Provide a Injection Token to global settings.\n */\nexport const NGX_GOOGLE_ANALYTICS_ROUTING_SETTINGS_TOKEN = new InjectionToken<IGoogleAnalyticsRoutingSettings>('ngx-google-analytics-routing-settings', {\n  factory: () => ({})\n});\n","import { Provider, APP_BOOTSTRAP_LISTENER, ComponentRef } from '@angular/core';\nimport { Router, NavigationEnd } from '@angular/router';\nimport { IGoogleAnalyticsRoutingSettings } from '../interfaces/i-google-analytics-routing-settings';\nimport { GoogleAnalyticsService } from '../services/google-analytics.service';\nimport { NGX_GOOGLE_ANALYTICS_ROUTING_SETTINGS_TOKEN } from '../tokens/ngx-google-analytics-router-settings-token';\nimport { filter, skip } from 'rxjs/operators';\n\n/**\n * Provide a DI Configuration to attach GA Trigger to Router Events at Angular Startup Cycle.\n */\nexport const NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER: Provider = {\n  provide: APP_BOOTSTRAP_LISTENER,\n  multi: true,\n  useFactory: GoogleAnalyticsRouterInitializer,\n  deps: [\n    NGX_GOOGLE_ANALYTICS_ROUTING_SETTINGS_TOKEN,\n    GoogleAnalyticsService\n  ]\n};\n\n/**\n * Attach a listener to `NavigationEnd` Router event. So, every time Router finish the page resolution it should call `NavigationEnd` event.\n * We assume that NavigationEnd is the final page resolution and call GA `page_view` command.\n *\n * To avoid double binds, we also destroy the subscription when de Bootstrap Component is destroied. But, we don't know for sure\n * that this strategy does not cause double bind on multiple bootstrap components.\n *\n * We are using de component's injector reference to resolve Router, sou I hope there is no problem w/ double bing.\n *\n * If you have this problem, I encourage not Use NgxGoogleAnalyticsRouterModule and atach the listener on AppComponent initialization.\n */\nexport function GoogleAnalyticsRouterInitializer(\n  settings: IGoogleAnalyticsRoutingSettings,\n  gaService: GoogleAnalyticsService\n) {\n  return async (c: ComponentRef<any>) => {\n    const router = c.injector.get(Router);\n    const { include = [], exclude = [] } = settings ?? {};\n    const includeRules = normalizePathRules(include);\n    const excludeRules = normalizePathRules(exclude);\n    const subs = router\n      .events\n      .pipe(\n        filter((event: NavigationEnd) => event instanceof NavigationEnd),\n        skip(1), // Prevend double views on the first tigger (because GA Already send one ping on setup)\n        filter(event => includeRules.length > 0\n          ? includeRules.some(rule => rule.test(event.urlAfterRedirects))\n          : true),\n        filter(event => excludeRules.length > 0\n          ? !excludeRules.some(rule => rule.test(event.urlAfterRedirects))\n          : true)\n      )\n      .subscribe(event => gaService.pageView(event.urlAfterRedirects, undefined));\n    // Cleanup\n    c.onDestroy(() => subs.unsubscribe());\n  };\n}\n\n/** Converts all path rules from string to Regex instances */\nfunction normalizePathRules(rules: Array<string | RegExp>): Array<RegExp> {\n  return rules.map(rule => (rule instanceof RegExp)\n    ? rule\n    : new RegExp(`^${rule.replace('*', '.*')}$`, 'i'));\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { IGoogleAnalyticsCommand } from './interfaces/i-google-analytics-command';\nimport { NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER } from './initializers/google-analytics.initializer';\nimport { NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN } from './tokens/ngx-google-analytics-settings-token';\nimport { GaEventDirective } from './directives/ga-event.directive';\nimport { GaEventCategoryDirective } from './directives/ga-event-category.directive';\nimport { GaEventFormInputDirective } from './directives/ga-event-form-input.directive';\nimport { IGoogleAnalyticsSettings } from './interfaces/i-google-analytics-settings';\n\n/**\n * Install Google Analytics Tracking code on your environment and configure tracking ID.\n *\n * This module should be a dependency on the highest level module of the application, i.e. AppModule in most use cases.\n */\n@NgModule({\n  imports: [\n  ],\n  declarations: [\n    GaEventDirective,\n    GaEventCategoryDirective,\n    GaEventFormInputDirective\n  ],\n  exports: [\n    GaEventDirective,\n    GaEventCategoryDirective,\n    GaEventFormInputDirective\n  ]\n})\nexport class NgxGoogleAnalyticsModule {\n  /**\n   * You should provide a valid Google TrackingCode. This code will be provided to the entire application by\n   * `NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN` token. You can inject this code in you components if you like by\n   * use the following injection code `@Inject(NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN) gaConfig: IGoogleAnalyticsSettings`\n   *\n   * @param trackingCode The Google Tracking Code\n   * @param initCommands When placed, it will run any GA Commands in sequence after setup GA environment.\n   * @param uri When placed, it will change the default js URI to the provided one.\n   * @param enableTracing When true, trace GA tracking errors on production mode.\n   * @param nonce When placed, nonce will be added to script tag.\n   */\n  static forRoot(trackingCode: string, initCommands: IGoogleAnalyticsCommand[] = [], uri?: string, enableTracing?: boolean, nonce?: string): ModuleWithProviders<NgxGoogleAnalyticsModule> {\n    return {\n      ngModule: NgxGoogleAnalyticsModule,\n      providers: [\n        {\n          provide: NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,\n          useValue: {\n            trackingCode,\n            initCommands,\n            uri,\n            enableTracing,\n            nonce\n          } as IGoogleAnalyticsSettings\n        },\n        NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER,\n      ]\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER } from '../initializers/google-analytics-router.initializer';\nimport { NgxGoogleAnalyticsModule } from '../ngx-google-analytics.module';\nimport { IGoogleAnalyticsRoutingSettings } from '../interfaces/i-google-analytics-routing-settings';\nimport { NGX_GOOGLE_ANALYTICS_ROUTING_SETTINGS_TOKEN } from '../tokens/ngx-google-analytics-router-settings-token';\n\n/**\n * Attach a listener to `NavigationEnd` Router event. So, every time Router finish the page resolution it should call `NavigationEnd` event.\n * We assume that NavigationEnd is the final page resolution and call GA `page_view` command.\n *\n * To avoid double binds, we also destroy the subscription when de Bootstrap Component is destroied. But, we don't know for sure\n * that this strategy does not cause double bind on multiple bootstrap components.\n *\n * We are using de component's injector reference to resolve Router, sou I hope there is no problem w/ double bing.\n *\n * If you have this problem, I encourage not Use NgxGoogleAnalyticsRouterModule and atach the listener on AppComponent initialization.\n *\n * This Module is just a sugar for:\n *\n```typescript\nconstructor(private router: Router) {}\n...\nngOnInit() {\n  ...\n  this.router\n    .events\n    .pipe(takeUntil(this.onDestroy$))\n    .subscribe(event => {\n      if (event instanceof NavigationEnd) {\n        gaService.pageView(event.urlAfterRedirects, undefined);\n      }\n    });\n```\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    NgxGoogleAnalyticsModule\n  ],\n  providers: [\n    NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER\n  ],\n  declarations: []\n})\nexport class NgxGoogleAnalyticsRouterModule {\n  static forRoot(settings?: IGoogleAnalyticsRoutingSettings): ModuleWithProviders<NgxGoogleAnalyticsRouterModule> {\n    return {\n      ngModule: NgxGoogleAnalyticsRouterModule,\n      providers: [\n        {\n          provide: NGX_GOOGLE_ANALYTICS_ROUTING_SETTINGS_TOKEN,\n          useValue: settings ?? {}\n        }\n      ]\n    };\n  }\n}\n","/*\n * Public API Surface of ngx-google-analytics\n */\n\nexport * from './lib/directives/ga-event-category.directive';\nexport * from './lib/directives/ga-event.directive';\nexport * from './lib/directives/ga-event-form-input.directive';\n\nexport * from './lib/enums/ga-action.enum';\n\nexport * from './lib/initializers/google-analytics.initializer';\nexport * from './lib/initializers/google-analytics-router.initializer';\n\nexport * from './lib/interfaces/i-google-analytics-command';\nexport * from './lib/interfaces/i-google-analytics-routing-settings';\nexport * from './lib/interfaces/i-google-analytics-settings';\n\nexport * from './lib/services/google-analytics.service';\n\nexport * from './lib/tokens/ngx-data-layer-token';\nexport * from './lib/tokens/ngx-google-analytics-router-settings-token';\nexport * from './lib/tokens/ngx-google-analytics-settings-token';\nexport * from './lib/tokens/ngx-gtag-token';\nexport * from './lib/tokens/ngx-window-token';\n\nexport * from './lib/types/data-layer.type';\nexport * from './lib/types/ga-action.type';\nexport * from './lib/types/gtag.type';\n\nexport * from './lib/ngx-google-analytics.module';\nexport * from './lib/ngx-google-analytics-router/ngx-google-analytics-router.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}