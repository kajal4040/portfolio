(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('@angular/router'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-google-analytics', ['exports', '@angular/core', '@angular/common', 'rxjs', '@angular/router', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['ngx-google-analytics'] = {}, global.ng.core, global.ng.common, global.rxjs, global.ng.router, global.rxjs.operators));
}(this, (function (exports, i0, i2, rxjs, router, operators) { 'use strict';

    var GaEventCategoryDirective = /** @class */ (function () {
        function GaEventCategoryDirective() {
        }
        return GaEventCategoryDirective;
    }());
    GaEventCategoryDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: "[gaEvent][gaCategory],\n             [gaCategory]",
                    exportAs: 'gaCategory'
                },] }
    ];
    GaEventCategoryDirective.ctorParameters = function () { return []; };
    GaEventCategoryDirective.propDecorators = {
        gaCategory: [{ type: i0.Input }]
    };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /**
     * Provide a Injection Token to global settings.
     */
    var NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN = new i0.InjectionToken('ngx-google-analytics-settings', {
        factory: function () { return ({ trackingCode: '', enableTracing: false }); }
    });

    /**
     * Check if this environment can access Window object and return window or null if false.
     */
    function getWindow(platformId) {
        return (i2.isPlatformBrowser(platformId))
            ? window : null;
    }
    /**
     * Provide DOM Window reference or null if the environment is not a Browser.
     */
    var NGX_WINDOW = new i0.InjectionToken('ngx-window', {
        providedIn: 'root',
        factory: function () { return getWindow(i0.inject(i0.PLATFORM_ID)); },
    });

    /**
     * Check if there is some global function called gtag on Window object, or create an empty function to doesn't brake codes...
     */
    function getDataLayerFn(window) {
        return (window)
            ? window['dataLayer'] = window['dataLayer'] || []
            : null;
    }
    /**
     * Provides an injection token to access Google Analytics DataLayer Collection
     */
    var NGX_DATA_LAYER = new i0.InjectionToken('ngx-data-layer', {
        providedIn: 'root',
        factory: function () { return getDataLayerFn(i0.inject(NGX_WINDOW)); }
    });

    /**
     * Check if there is some global function called gtag on Window object, or create an empty function to doesn't brake codes...
     */
    function getGtagFn(window, dataLayer) {
        return (window)
            ? window['gtag'] = window['gtag'] || function () {
                dataLayer.push(arguments);
            }
            : null;
    }
    /**
     * Provides an injection token to access Google Analytics Gtag Function
     */
    var NGX_GTAG_FN = new i0.InjectionToken('ngx-gtag-fn', {
        providedIn: 'root',
        factory: function () { return getGtagFn(i0.inject(NGX_WINDOW), i0.inject(NGX_DATA_LAYER)); }
    });

    var GoogleAnalyticsService = /** @class */ (function () {
        function GoogleAnalyticsService(settings, _document, _gtag) {
            this.settings = settings;
            this._document = _document;
            this._gtag = _gtag;
        }
        Object.defineProperty(GoogleAnalyticsService.prototype, "document", {
            get: function () {
                return this._document;
            },
            enumerable: false,
            configurable: true
        });
        GoogleAnalyticsService.prototype.throw = function (err) {
            if ((this.settings.enableTracing || i0.isDevMode()) && console && console.error) {
                console.error(err);
            }
        };
        /** @todo Change this to `Object.fromEntity()` in the future... */
        GoogleAnalyticsService.prototype.toKeyValue = function (map) {
            return (map.size > 0)
                ? Array.from(map).reduce(function (obj, _a) {
                    var _b = __read(_a, 2), key = _b[0], value = _b[1];
                    return Object.defineProperty(obj, key, { value: value, enumerable: true });
                }, {})
                : undefined;
        };
        /**
         * Call native GA Tag
         */
        GoogleAnalyticsService.prototype.gtag = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            try {
                this._gtag.apply(this, __spread(args.filter(function (x) { return x !== undefined; })));
            }
            catch (err) {
                this.throw(err);
            }
        };
        /**
         * Send an event trigger to GA. It is the same as call:
         * ```js
         * gtag('event', 'video_auto_play_start', {
         *   'event_label': 'My promotional video',
         *   'event_category': 'video_auto_play'
         * });
         * ```
         *
         * @param action 'video_auto_play_start'
         * @param category 'video_auto_play'
         * @param label 'My promotional video'
         * @param value An value to measure something
         */
        GoogleAnalyticsService.prototype.event = function (action, category, label, value, interaction) {
            try {
                var opt = new Map();
                if (category) {
                    opt.set('event_category', category);
                }
                if (label) {
                    opt.set('event_label', label);
                }
                if (value) {
                    opt.set('value', value);
                }
                if (interaction !== undefined) {
                    opt.set('interaction', interaction);
                }
                var params = this.toKeyValue(opt);
                if (params) {
                    this.gtag('event', action, params);
                }
                else {
                    this.gtag('event', action);
                }
            }
            catch (error) {
                this.throw(error);
            }
        };
        /**
         * Send an page view event. This is the same as
         *
         * ```js
         * gtag('config', 'GA_TRACKING_ID', {
         *   'page_title' : 'Homepage',
         *   'page_path': '/home'
         * });
         * ```
         *
         * The tracking ID is injected automatically by Inject Token NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN
         *
         * @param path /home
         * @param title Homepage
         * @param location '{ page_location }'
         * @param options '{ ... custom dimentions }'
         */
        GoogleAnalyticsService.prototype.pageView = function (path, title, location, options) {
            try {
                var opt_1 = new Map([['page_path', path]]);
                if (title) {
                    opt_1.set('page_title', title);
                }
                if (location || this.document) {
                    opt_1.set('page_location', (location || this.document.location.href));
                }
                if (options) {
                    Object
                        .entries(options)
                        .map(function (_a) {
                        var _b = __read(_a, 2), key = _b[0], value = _b[1];
                        return opt_1.set(key, value);
                    });
                }
                this.gtag('config', this.settings.trackingCode, this.toKeyValue(opt_1));
            }
            catch (error) {
                this.throw(error);
            }
        };
        /**
         * Send an event to report a App Page View. It is the same as
         *
         * ```js
         * gtag('event', 'screen_view', {
         *   'app_name': 'myAppName',
         *   'screen_name' : 'Home'
         * });
         *
         * ```
         *
         * @param screen 'screen_name'
         * @param appName 'app_name'
         * @param appId 'app_id'
         * @param appVersion 'app_version'
         * @param installerId 'app_installer_id'
         */
        GoogleAnalyticsService.prototype.appView = function (screen, appName, appId, appVersion, installerId) {
            try {
                var opt = new Map([['screen_name', screen], ['app_name', appName]]);
                if (appId) {
                    opt.set('app_id', appId);
                }
                if (appVersion) {
                    opt.set('app_version', appVersion);
                }
                if (installerId) {
                    opt.set('app_installer_id', installerId);
                }
                this.gtag('event', 'screen_view', this.toKeyValue(opt));
            }
            catch (error) {
                this.throw(error);
            }
        };
        /**
         * Defines persistent values on GoogleAnalytics
         *
         * @see https://developers.google.com/analytics/devguides/collection/gtagjs/setting-values
         *
         * ```js
         * gtag('set', {
         *   'currency': 'USD',
         *   'country': 'US'
         * });
         * ```
         */
        GoogleAnalyticsService.prototype.set = function () {
            var options = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                options[_i] = arguments[_i];
            }
            try {
                this._gtag.apply(this, __spread(['set'], options));
            }
            catch (err) {
                this.throw(err);
            }
        };
        /**
         * Send an event to GA to report an application error. It is the same as
         *
         * ```js
         * gtag('event', 'exception', {
         *   'description': 'error_description',
         *   'fatal': false   // set to true if the error is fatal
         * });
         * ```
         *
         * @param description 'error_description'
         * @param fatal set to true if the error is fatal
         */
        GoogleAnalyticsService.prototype.exception = function (description, fatal) {
            try {
                var opt = new Map();
                if (description) {
                    opt.set('description', description);
                }
                if (fatal) {
                    opt.set('fatal', fatal);
                }
                var params = this.toKeyValue(opt);
                if (params) {
                    this.gtag('event', 'exception', this.toKeyValue(opt));
                }
                else {
                    this.gtag('event', 'exception');
                }
            }
            catch (error) {
                this.throw(error);
            }
        };
        return GoogleAnalyticsService;
    }());
    GoogleAnalyticsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function GoogleAnalyticsService_Factory() { return new GoogleAnalyticsService(i0.ɵɵinject(NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN), i0.ɵɵinject(i2.DOCUMENT), i0.ɵɵinject(NGX_GTAG_FN)); }, token: GoogleAnalyticsService, providedIn: "root" });
    GoogleAnalyticsService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    GoogleAnalyticsService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,] }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i2.DOCUMENT,] }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: [NGX_GTAG_FN,] }] }
    ]; };

    var GaEventDirective = /** @class */ (function () {
        function GaEventDirective(gaCategoryDirective, gaService, settings, el) {
            this.gaCategoryDirective = gaCategoryDirective;
            this.gaService = gaService;
            this.settings = settings;
            this.el = el;
            this.gaBind = 'click';
        }
        Object.defineProperty(GaEventDirective.prototype, "gaBind", {
            get: function () {
                return this._gaBind;
            },
            set: function (gaBind) {
                var _this = this;
                if (this.bindSubscription) {
                    this.bindSubscription.unsubscribe();
                }
                this._gaBind = gaBind;
                this.bindSubscription = rxjs.fromEvent(this.el.nativeElement, gaBind).subscribe(function () { return _this.trigger(); });
            },
            enumerable: false,
            configurable: true
        });
        GaEventDirective.prototype.ngOnDestroy = function () {
            if (this.bindSubscription) {
                this.bindSubscription.unsubscribe();
            }
        };
        GaEventDirective.prototype.trigger = function () {
            try {
                // Observação: não é obrigatório especificar uma categoria, uma etiqueta ou um valor. Consulte Eventos padrão do Google Analytics abaixo.
                // if (!this.$gaCategoryDirective) {
                //   throw new Error('You must provide a gaCategory attribute w/ gaEvent Directive.');
                // }
                if (!this.gaAction && !this.gaEvent) {
                    throw new Error('You must provide a gaAction attribute to identify this event.');
                }
                this.gaService
                    .event(this.gaAction || this.gaEvent, (this.gaCategoryDirective) ? this.gaCategoryDirective.gaCategory : undefined, this.gaLabel || this.label, this.gaValue, this.gaInteraction);
            }
            catch (err) {
                this.throw(err);
            }
        };
        GaEventDirective.prototype.throw = function (err) {
            if ((i0.isDevMode() || this.settings.enableTracing) && console && console.warn) {
                console.warn(err);
            }
        };
        return GaEventDirective;
    }());
    GaEventDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: "[gaEvent]",
                    exportAs: 'gaEvent'
                },] }
    ];
    GaEventDirective.ctorParameters = function () { return [
        { type: GaEventCategoryDirective, decorators: [{ type: i0.Optional }] },
        { type: GoogleAnalyticsService },
        { type: undefined, decorators: [{ type: i0.Inject, args: [NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,] }] },
        { type: i0.ElementRef }
    ]; };
    GaEventDirective.propDecorators = {
        gaAction: [{ type: i0.Input }],
        gaLabel: [{ type: i0.Input }],
        label: [{ type: i0.Input }],
        gaValue: [{ type: i0.Input }],
        gaInteraction: [{ type: i0.Input }],
        gaEvent: [{ type: i0.Input }],
        gaBind: [{ type: i0.Input }]
    };

    var GaEventFormInputDirective = /** @class */ (function () {
        function GaEventFormInputDirective(gaEvent) {
            this.gaEvent = gaEvent;
            this.gaBind = 'focus';
        }
        Object.defineProperty(GaEventFormInputDirective.prototype, "gaBind", {
            set: function (bind) {
                if (this.gaEvent) {
                    this.gaEvent.gaBind = bind;
                }
            },
            enumerable: false,
            configurable: true
        });
        return GaEventFormInputDirective;
    }());
    GaEventFormInputDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: "input[gaEvent],\n             select[gaEvent],\n             textarea[gaEvent]"
                },] }
    ];
    GaEventFormInputDirective.ctorParameters = function () { return [
        { type: GaEventDirective, decorators: [{ type: i0.Host }, { type: i0.Optional }] }
    ]; };
    GaEventFormInputDirective.propDecorators = {
        gaBind: [{ type: i0.Input }]
    };

    (function (GaActionEnum) {
        GaActionEnum["ADD_PAYMENT_INFO"] = "add_payment_info";
        GaActionEnum["ADD_TO_CART"] = "add_to_cart";
        GaActionEnum["ADD_TO_WISHLIST"] = "add_to_wishlist";
        GaActionEnum["BEGIN_CHECKOUT"] = "begin_checkout";
        GaActionEnum["CHECKOUT_PROGRESS"] = "checkout_progress";
        GaActionEnum["GENERATE_LEAD"] = "generate_lead";
        GaActionEnum["LOGIN"] = "login";
        GaActionEnum["PURCHASE"] = "purchase";
        GaActionEnum["REFUND"] = "refund";
        GaActionEnum["REMOVE_FROM_CART"] = "remove_from_cart";
        GaActionEnum["SEARCH"] = "search";
        GaActionEnum["SELECT_CONTENT"] = "select_content";
        GaActionEnum["SET_CHECKOUT_OPTION"] = "set_checkout_option";
        GaActionEnum["SHARE"] = "share";
        GaActionEnum["SIGN_UP"] = "sign_up";
        GaActionEnum["VIEW_ITEM"] = "view_item";
        GaActionEnum["VIEW_ITEM_LIST"] = "view_item_list";
        GaActionEnum["VIEW_PROMOTION"] = "view_promotion";
        GaActionEnum["VIEW_SEARCH_RESULT"] = "view_search_results";
        GaActionEnum["VIEW_SEARCH_RESULTS"] = "view_search_results";
    })(exports.GaActionEnum || (exports.GaActionEnum = {}));

    /**
     * Provide a DI Configuration to attach GA Initialization at Angular Startup Cycle.
     */
    var NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER = {
        provide: i0.APP_INITIALIZER,
        multi: true,
        useFactory: GoogleAnalyticsInitializer,
        deps: [
            NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,
            NGX_GTAG_FN,
            i2.DOCUMENT
        ]
    };
    /**
     * Create a script element on DOM and link it to Google Analytics tracking code URI.
     * After that, execute exactly same init process as tracking snippet code.
     */
    function GoogleAnalyticsInitializer(settings, gtag, document) {
        var _this = this;
        return function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, _b, _c, command, s, head;
            var e_1, _d;
            return __generator(this, function (_e) {
                if (!settings.trackingCode) {
                    if (!i0.isDevMode()) {
                        console.error('Empty tracking code for Google Analytics. Make sure to provide one when initializing NgxGoogleAnalyticsModule.');
                    }
                    return [2 /*return*/];
                }
                if (!gtag) {
                    if (!i0.isDevMode()) {
                        console.error('Was not possible create or read gtag() fn. Make sure this module is running on a Browser w/ access to Window interface.');
                    }
                    return [2 /*return*/];
                }
                if (!document) {
                    if (!i0.isDevMode()) {
                        console.error('Was not possible to access Document interface. Make sure this module is running on a Browser w/ access do Document interface.');
                    }
                }
                // Set default ga.js uri
                settings.uri = settings.uri || "https://www.googletagmanager.com/gtag/js?id=" + settings.trackingCode;
                // these commands should run first!
                settings.initCommands = (_a = settings === null || settings === void 0 ? void 0 : settings.initCommands) !== null && _a !== void 0 ? _a : [];
                // assert config command
                if (!settings.initCommands.find(function (x) { return x.command === 'config'; })) {
                    settings.initCommands.unshift({ command: 'config', values: [settings.trackingCode] });
                }
                // assert js command
                if (!settings.initCommands.find(function (x) { return x.command === 'js'; })) {
                    settings.initCommands.unshift({ command: 'js', values: [new Date()] });
                }
                try {
                    for (_b = __values(settings.initCommands), _c = _b.next(); !_c.done; _c = _b.next()) {
                        command = _c.value;
                        gtag.apply(void 0, __spread([command.command], command.values));
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_d = _b.return)) _d.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                s = document.createElement('script');
                s.async = true;
                s.src = settings.uri;
                if (settings.nonce) {
                    s.setAttribute('nonce', settings.nonce);
                }
                head = document.getElementsByTagName('head')[0];
                head.appendChild(s);
                return [2 /*return*/];
            });
        }); };
    }

    /**
     * Provide a Injection Token to global settings.
     */
    var NGX_GOOGLE_ANALYTICS_ROUTING_SETTINGS_TOKEN = new i0.InjectionToken('ngx-google-analytics-routing-settings', {
        factory: function () { return ({}); }
    });

    /**
     * Provide a DI Configuration to attach GA Trigger to Router Events at Angular Startup Cycle.
     */
    var NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER = {
        provide: i0.APP_BOOTSTRAP_LISTENER,
        multi: true,
        useFactory: GoogleAnalyticsRouterInitializer,
        deps: [
            NGX_GOOGLE_ANALYTICS_ROUTING_SETTINGS_TOKEN,
            GoogleAnalyticsService
        ]
    };
    /**
     * Attach a listener to `NavigationEnd` Router event. So, every time Router finish the page resolution it should call `NavigationEnd` event.
     * We assume that NavigationEnd is the final page resolution and call GA `page_view` command.
     *
     * To avoid double binds, we also destroy the subscription when de Bootstrap Component is destroied. But, we don't know for sure
     * that this strategy does not cause double bind on multiple bootstrap components.
     *
     * We are using de component's injector reference to resolve Router, sou I hope there is no problem w/ double bing.
     *
     * If you have this problem, I encourage not Use NgxGoogleAnalyticsRouterModule and atach the listener on AppComponent initialization.
     */
    function GoogleAnalyticsRouterInitializer(settings, gaService) {
        var _this = this;
        return function (c) { return __awaiter(_this, void 0, void 0, function () {
            var router$1, _a, _b, include, _c, exclude, includeRules, excludeRules, subs;
            return __generator(this, function (_d) {
                router$1 = c.injector.get(router.Router);
                _a = settings !== null && settings !== void 0 ? settings : {}, _b = _a.include, include = _b === void 0 ? [] : _b, _c = _a.exclude, exclude = _c === void 0 ? [] : _c;
                includeRules = normalizePathRules(include);
                excludeRules = normalizePathRules(exclude);
                subs = router$1
                    .events
                    .pipe(operators.filter(function (event) { return event instanceof router.NavigationEnd; }), operators.skip(1), // Prevend double views on the first tigger (because GA Already send one ping on setup)
                operators.filter(function (event) { return includeRules.length > 0
                    ? includeRules.some(function (rule) { return rule.test(event.urlAfterRedirects); })
                    : true; }), operators.filter(function (event) { return excludeRules.length > 0
                    ? !excludeRules.some(function (rule) { return rule.test(event.urlAfterRedirects); })
                    : true; }))
                    .subscribe(function (event) { return gaService.pageView(event.urlAfterRedirects, undefined); });
                // Cleanup
                c.onDestroy(function () { return subs.unsubscribe(); });
                return [2 /*return*/];
            });
        }); };
    }
    /** Converts all path rules from string to Regex instances */
    function normalizePathRules(rules) {
        return rules.map(function (rule) { return (rule instanceof RegExp)
            ? rule
            : new RegExp("^" + rule.replace('*', '.*') + "$", 'i'); });
    }

    /**
     * Install Google Analytics Tracking code on your environment and configure tracking ID.
     *
     * This module should be a dependency on the highest level module of the application, i.e. AppModule in most use cases.
     */
    var NgxGoogleAnalyticsModule = /** @class */ (function () {
        function NgxGoogleAnalyticsModule() {
        }
        /**
         * You should provide a valid Google TrackingCode. This code will be provided to the entire application by
         * `NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN` token. You can inject this code in you components if you like by
         * use the following injection code `@Inject(NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN) gaConfig: IGoogleAnalyticsSettings`
         *
         * @param trackingCode The Google Tracking Code
         * @param initCommands When placed, it will run any GA Commands in sequence after setup GA environment.
         * @param uri When placed, it will change the default js URI to the provided one.
         * @param enableTracing When true, trace GA tracking errors on production mode.
         * @param nonce When placed, nonce will be added to script tag.
         */
        NgxGoogleAnalyticsModule.forRoot = function (trackingCode, initCommands, uri, enableTracing, nonce) {
            if (initCommands === void 0) { initCommands = []; }
            return {
                ngModule: NgxGoogleAnalyticsModule,
                providers: [
                    {
                        provide: NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,
                        useValue: {
                            trackingCode: trackingCode,
                            initCommands: initCommands,
                            uri: uri,
                            enableTracing: enableTracing,
                            nonce: nonce
                        }
                    },
                    NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER,
                ]
            };
        };
        return NgxGoogleAnalyticsModule;
    }());
    NgxGoogleAnalyticsModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [],
                    declarations: [
                        GaEventDirective,
                        GaEventCategoryDirective,
                        GaEventFormInputDirective
                    ],
                    exports: [
                        GaEventDirective,
                        GaEventCategoryDirective,
                        GaEventFormInputDirective
                    ]
                },] }
    ];

    /**
     * Attach a listener to `NavigationEnd` Router event. So, every time Router finish the page resolution it should call `NavigationEnd` event.
     * We assume that NavigationEnd is the final page resolution and call GA `page_view` command.
     *
     * To avoid double binds, we also destroy the subscription when de Bootstrap Component is destroied. But, we don't know for sure
     * that this strategy does not cause double bind on multiple bootstrap components.
     *
     * We are using de component's injector reference to resolve Router, sou I hope there is no problem w/ double bing.
     *
     * If you have this problem, I encourage not Use NgxGoogleAnalyticsRouterModule and atach the listener on AppComponent initialization.
     *
     * This Module is just a sugar for:
     *
    ```typescript
    constructor(private router: Router) {}
    ...
    ngOnInit() {
      ...
      this.router
        .events
        .pipe(takeUntil(this.onDestroy$))
        .subscribe(event => {
          if (event instanceof NavigationEnd) {
            gaService.pageView(event.urlAfterRedirects, undefined);
          }
        });
    ```
     */
    var NgxGoogleAnalyticsRouterModule = /** @class */ (function () {
        function NgxGoogleAnalyticsRouterModule() {
        }
        NgxGoogleAnalyticsRouterModule.forRoot = function (settings) {
            return {
                ngModule: NgxGoogleAnalyticsRouterModule,
                providers: [
                    {
                        provide: NGX_GOOGLE_ANALYTICS_ROUTING_SETTINGS_TOKEN,
                        useValue: settings !== null && settings !== void 0 ? settings : {}
                    }
                ]
            };
        };
        return NgxGoogleAnalyticsRouterModule;
    }());
    NgxGoogleAnalyticsRouterModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i2.CommonModule,
                        NgxGoogleAnalyticsModule
                    ],
                    providers: [
                        NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER
                    ],
                    declarations: []
                },] }
    ];

    /*
     * Public API Surface of ngx-google-analytics
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.GaEventCategoryDirective = GaEventCategoryDirective;
    exports.GaEventDirective = GaEventDirective;
    exports.GaEventFormInputDirective = GaEventFormInputDirective;
    exports.GoogleAnalyticsInitializer = GoogleAnalyticsInitializer;
    exports.GoogleAnalyticsRouterInitializer = GoogleAnalyticsRouterInitializer;
    exports.GoogleAnalyticsService = GoogleAnalyticsService;
    exports.NGX_DATA_LAYER = NGX_DATA_LAYER;
    exports.NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER = NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER;
    exports.NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER = NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER;
    exports.NGX_GOOGLE_ANALYTICS_ROUTING_SETTINGS_TOKEN = NGX_GOOGLE_ANALYTICS_ROUTING_SETTINGS_TOKEN;
    exports.NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN = NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN;
    exports.NGX_GTAG_FN = NGX_GTAG_FN;
    exports.NGX_WINDOW = NGX_WINDOW;
    exports.NgxGoogleAnalyticsModule = NgxGoogleAnalyticsModule;
    exports.NgxGoogleAnalyticsRouterModule = NgxGoogleAnalyticsRouterModule;
    exports.getDataLayerFn = getDataLayerFn;
    exports.getGtagFn = getGtagFn;
    exports.getWindow = getWindow;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-google-analytics.umd.js.map
