import { Injectable, Directive, ElementRef, Renderer2, Input, NgModule } from '@angular/core';
import { Subscription, fromEvent, EMPTY } from 'rxjs';
import { CommonModule } from '@angular/common';

import * as ɵngcc0 from '@angular/core';
class ScrollService {
    constructor() {
        this.scrollSub = new Subscription();
        this.resizeSub = new Subscription();
        // set initial value
        this.manageScrollPos();
        // create observable that we can subscribe to from component or directive
        this.scrollObs =
            typeof window !== "undefined" ? fromEvent(window, "scroll") : EMPTY;
        // initiate subscription to update values
        this.scrollSub = this.scrollObs.subscribe(() => this.manageScrollPos());
        // create observable for changes in screen size
        this.resizeObs =
            typeof window !== "undefined" ? fromEvent(window, "resize") : EMPTY;
        // initiate subscription to update values
        this.resizeSub = this.resizeObs.subscribe(() => this.manageScrollPos());
    }
    manageScrollPos() {
        // update service property
        this.pos = typeof window !== "undefined" ? window.pageYOffset : 0;
    }
    ngOnDestroy() {
        this.scrollSub.unsubscribe();
        this.resizeSub.unsubscribe();
    }
}
ScrollService.ɵfac = function ScrollService_Factory(t) { return new (t || ScrollService)(); };
ScrollService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ScrollService, factory: ScrollService.ɵfac });
ScrollService.ctorParameters = () => [];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollService, [{
        type: Injectable
    }], function () { return []; }, null); })();

class AnimateOnScrollDirective {
    constructor(elementRef, renderer, scroll) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.scroll = scroll;
        this.scrollSub = new Subscription();
        this.resizeSub = new Subscription();
        // Pixel offset from screen bottom to the animated element to determine the start of the animation
        this.offset = 80; // for scroll Listener
    }
    get id() {
        return this.elementRef.nativeElement.id;
    }
    ngOnInit() {
        if (!this.animationName) {
            return;
        }
        // default visibility to false
        this.isVisible = false;
        this.useScroll = this.useScroll
            ? this.useScroll
            : this.useScroll === false
                ? false
                : true;
        this.threshold = this.threshold ? this.threshold || 0.5 : 0.5;
        // using intersecting observer by default, else fallback to scroll Listener
        if ("IntersectionObserver" in window && this.useScroll) {
            const options = {
                root: null,
                threshold: this.threshold,
                rootMargin: "0px",
            };
            const observer = new IntersectionObserver((entries, _) => {
                entries.forEach((entry) => {
                    if (!entry.isIntersecting) {
                        return;
                    }
                    this.addAnimationClass();
                });
            }, options);
            observer.observe(this.elementRef.nativeElement);
            return;
        }
        // subscribe to scroll event using service
        this.scrollSub = this.scroll.scrollObs.subscribe(() => this.manageVisibility());
        // subscribe to resize event using service so scrolling position is always accurate
        this.resizeSub = this.scroll.resizeObs.subscribe(() => this.manageVisibility());
    }
    ngAfterViewInit() {
        // run visibility check initially in case the element is already visible in viewport
        setTimeout(() => this.manageVisibility(), 1);
    }
    ngOnDestroy() {
        this.scrollSub.unsubscribe();
        this.resizeSub.unsubscribe();
    }
    /**
     * check for visibility of element in viewport to add animation
     *
     * @returns void
     */
    manageVisibility() {
        if (this.isVisible) {
            // Optimisation; nothing to do if class has already been applied
            return;
        }
        // check for window height, may change with a window resize
        this.getWinHeight();
        // get vertical position for selected element
        this.getOffsetTop();
        // we should trigger the addition of the animation class a little after getting to the element
        const scrollTrigger = this.offsetTop + this.offset - this.winHeight;
        // using values updated in service
        if (this.scroll.pos >= scrollTrigger) {
            this.addAnimationClass();
        }
    }
    /**
     * utility function to mark element visible and add css class
     *
     * @returns void
     */
    addAnimationClass() {
        // stops execution if no class is provided
        if (!this.animationName) {
            return;
        }
        // mark this element visible, we won't remove the class after this
        this.isVisible = true;
        // use default for animate.css if no value provided
        this.setClass(this.animationName);
    }
    /**
     * utility function to add one or more css classes to element in DOM
     *
     * @param  {string} classes
     * @returns void
     */
    setClass(classes) {
        for (const c of classes.split(" ")) {
            this.renderer.addClass(this.elementRef.nativeElement, c);
        }
    }
    /**
     * get window height utility function
     *
     * @returns void
     */
    getWinHeight() {
        this.winHeight = typeof window !== "undefined" ? window.innerHeight : 0;
    }
    /**
     * get offsetTop value for element
     *
     * @returns void
     */
    getOffsetTop() {
        if (typeof this.elementRef.nativeElement.getBoundingClientRect === "function") {
            const viewportTop = this.elementRef.nativeElement.getBoundingClientRect().top;
            const clientTop = this.elementRef.nativeElement.clientTop;
            // get vertical position for selected element
            this.offsetTop = viewportTop + this.scroll.pos - clientTop;
        }
        else {
            this.offsetTop = 0;
        }
    }
}
AnimateOnScrollDirective.ɵfac = function AnimateOnScrollDirective_Factory(t) { return new (t || AnimateOnScrollDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ScrollService)); };
AnimateOnScrollDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: AnimateOnScrollDirective, selectors: [["", "animateOnScroll", ""]], inputs: { offset: "offset", useScroll: "useScroll", threshold: "threshold", animationName: "animationName" } });
AnimateOnScrollDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ScrollService }
];
AnimateOnScrollDirective.propDecorators = {
    animationName: [{ type: Input }],
    offset: [{ type: Input }],
    useScroll: [{ type: Input }],
    threshold: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AnimateOnScrollDirective, [{
        type: Directive,
        args: [{
                // eslint-disable-next-line @angular-eslint/directive-selector
                selector: "[animateOnScroll]"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ScrollService }]; }, { offset: [{
            type: Input
        }], useScroll: [{
            type: Input
        }], threshold: [{
            type: Input
        }], animationName: [{
            type: Input
        }] }); })();

class AnimateOnScrollModule {
    static forRoot() {
        return {
            ngModule: AnimateOnScrollModule,
            providers: [ScrollService],
        };
    }
}
AnimateOnScrollModule.ɵfac = function AnimateOnScrollModule_Factory(t) { return new (t || AnimateOnScrollModule)(); };
AnimateOnScrollModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: AnimateOnScrollModule });
AnimateOnScrollModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AnimateOnScrollModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [AnimateOnScrollDirective],
                exports: [AnimateOnScrollDirective]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AnimateOnScrollModule, { declarations: function () { return [AnimateOnScrollDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [AnimateOnScrollDirective]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { AnimateOnScrollDirective, AnimateOnScrollModule, ScrollService };

//# sourceMappingURL=ng2-animate-on-scroll.js.map