import { __awaiter } from "tslib";
import { APP_BOOTSTRAP_LISTENER } from '@angular/core';
import { Router, NavigationEnd } from '@angular/router';
import { GoogleAnalyticsService } from '../services/google-analytics.service';
import { NGX_GOOGLE_ANALYTICS_ROUTING_SETTINGS_TOKEN } from '../tokens/ngx-google-analytics-router-settings-token';
import { filter, skip } from 'rxjs/operators';
/**
 * Provide a DI Configuration to attach GA Trigger to Router Events at Angular Startup Cycle.
 */
export const NGX_GOOGLE_ANALYTICS_ROUTER_INITIALIZER_PROVIDER = {
    provide: APP_BOOTSTRAP_LISTENER,
    multi: true,
    useFactory: GoogleAnalyticsRouterInitializer,
    deps: [
        NGX_GOOGLE_ANALYTICS_ROUTING_SETTINGS_TOKEN,
        GoogleAnalyticsService
    ]
};
/**
 * Attach a listener to `NavigationEnd` Router event. So, every time Router finish the page resolution it should call `NavigationEnd` event.
 * We assume that NavigationEnd is the final page resolution and call GA `page_view` command.
 *
 * To avoid double binds, we also destroy the subscription when de Bootstrap Component is destroied. But, we don't know for sure
 * that this strategy does not cause double bind on multiple bootstrap components.
 *
 * We are using de component's injector reference to resolve Router, sou I hope there is no problem w/ double bing.
 *
 * If you have this problem, I encourage not Use NgxGoogleAnalyticsRouterModule and atach the listener on AppComponent initialization.
 */
export function GoogleAnalyticsRouterInitializer(settings, gaService) {
    return (c) => __awaiter(this, void 0, void 0, function* () {
        const router = c.injector.get(Router);
        const { include = [], exclude = [] } = settings !== null && settings !== void 0 ? settings : {};
        const includeRules = normalizePathRules(include);
        const excludeRules = normalizePathRules(exclude);
        const subs = router
            .events
            .pipe(filter((event) => event instanceof NavigationEnd), skip(1), // Prevend double views on the first tigger (because GA Already send one ping on setup)
        filter(event => includeRules.length > 0
            ? includeRules.some(rule => rule.test(event.urlAfterRedirects))
            : true), filter(event => excludeRules.length > 0
            ? !excludeRules.some(rule => rule.test(event.urlAfterRedirects))
            : true))
            .subscribe(event => gaService.pageView(event.urlAfterRedirects, undefined));
        // Cleanup
        c.onDestroy(() => subs.unsubscribe());
    });
}
/** Converts all path rules from string to Regex instances */
function normalizePathRules(rules) {
    return rules.map(rule => (rule instanceof RegExp)
        ? rule
        : new RegExp(`^${rule.replace('*', '.*')}$`, 'i'));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWFuYWx5dGljcy1yb3V0ZXIuaW5pdGlhbGl6ZXIuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vcHJvamVjdHMvbmd4LWdvb2dsZS1hbmFseXRpY3Mvc3JjLyIsInNvdXJjZXMiOlsibGliL2luaXRpYWxpemVycy9nb29nbGUtYW5hbHl0aWNzLXJvdXRlci5pbml0aWFsaXplci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFZLHNCQUFzQixFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXhELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSwyQ0FBMkMsRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBQ25ILE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFOUM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxnREFBZ0QsR0FBYTtJQUN4RSxPQUFPLEVBQUUsc0JBQXNCO0lBQy9CLEtBQUssRUFBRSxJQUFJO0lBQ1gsVUFBVSxFQUFFLGdDQUFnQztJQUM1QyxJQUFJLEVBQUU7UUFDSiwyQ0FBMkM7UUFDM0Msc0JBQXNCO0tBQ3ZCO0NBQ0YsQ0FBQztBQUVGOzs7Ozs7Ozs7O0dBVUc7QUFDSCxNQUFNLFVBQVUsZ0NBQWdDLENBQzlDLFFBQXlDLEVBQ3pDLFNBQWlDO0lBRWpDLE9BQU8sQ0FBTyxDQUFvQixFQUFFLEVBQUU7UUFDcEMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEMsTUFBTSxFQUFFLE9BQU8sR0FBRyxFQUFFLEVBQUUsT0FBTyxHQUFHLEVBQUUsRUFBRSxHQUFHLFFBQVEsYUFBUixRQUFRLGNBQVIsUUFBUSxHQUFJLEVBQUUsQ0FBQztRQUN0RCxNQUFNLFlBQVksR0FBRyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNqRCxNQUFNLFlBQVksR0FBRyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNqRCxNQUFNLElBQUksR0FBRyxNQUFNO2FBQ2hCLE1BQU07YUFDTixJQUFJLENBQ0gsTUFBTSxDQUFDLENBQUMsS0FBb0IsRUFBRSxFQUFFLENBQUMsS0FBSyxZQUFZLGFBQWEsQ0FBQyxFQUNoRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsdUZBQXVGO1FBQ2hHLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQztZQUNyQyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFDL0QsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUNULE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQztZQUNyQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUNoRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQ1Y7YUFDQSxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQzlFLFVBQVU7UUFDVixDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQ3hDLENBQUMsQ0FBQSxDQUFDO0FBQ0osQ0FBQztBQUVELDZEQUE2RDtBQUM3RCxTQUFTLGtCQUFrQixDQUFDLEtBQTZCO0lBQ3ZELE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxZQUFZLE1BQU0sQ0FBQztRQUMvQyxDQUFDLENBQUMsSUFBSTtRQUNOLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN2RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvdmlkZXIsIEFQUF9CT09UU1RSQVBfTElTVEVORVIsIENvbXBvbmVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyLCBOYXZpZ2F0aW9uRW5kIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IElHb29nbGVBbmFseXRpY3NSb3V0aW5nU2V0dGluZ3MgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2ktZ29vZ2xlLWFuYWx5dGljcy1yb3V0aW5nLXNldHRpbmdzJztcbmltcG9ydCB7IEdvb2dsZUFuYWx5dGljc1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9nb29nbGUtYW5hbHl0aWNzLnNlcnZpY2UnO1xuaW1wb3J0IHsgTkdYX0dPT0dMRV9BTkFMWVRJQ1NfUk9VVElOR19TRVRUSU5HU19UT0tFTiB9IGZyb20gJy4uL3Rva2Vucy9uZ3gtZ29vZ2xlLWFuYWx5dGljcy1yb3V0ZXItc2V0dGluZ3MtdG9rZW4nO1xuaW1wb3J0IHsgZmlsdGVyLCBza2lwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vKipcbiAqIFByb3ZpZGUgYSBESSBDb25maWd1cmF0aW9uIHRvIGF0dGFjaCBHQSBUcmlnZ2VyIHRvIFJvdXRlciBFdmVudHMgYXQgQW5ndWxhciBTdGFydHVwIEN5Y2xlLlxuICovXG5leHBvcnQgY29uc3QgTkdYX0dPT0dMRV9BTkFMWVRJQ1NfUk9VVEVSX0lOSVRJQUxJWkVSX1BST1ZJREVSOiBQcm92aWRlciA9IHtcbiAgcHJvdmlkZTogQVBQX0JPT1RTVFJBUF9MSVNURU5FUixcbiAgbXVsdGk6IHRydWUsXG4gIHVzZUZhY3Rvcnk6IEdvb2dsZUFuYWx5dGljc1JvdXRlckluaXRpYWxpemVyLFxuICBkZXBzOiBbXG4gICAgTkdYX0dPT0dMRV9BTkFMWVRJQ1NfUk9VVElOR19TRVRUSU5HU19UT0tFTixcbiAgICBHb29nbGVBbmFseXRpY3NTZXJ2aWNlXG4gIF1cbn07XG5cbi8qKlxuICogQXR0YWNoIGEgbGlzdGVuZXIgdG8gYE5hdmlnYXRpb25FbmRgIFJvdXRlciBldmVudC4gU28sIGV2ZXJ5IHRpbWUgUm91dGVyIGZpbmlzaCB0aGUgcGFnZSByZXNvbHV0aW9uIGl0IHNob3VsZCBjYWxsIGBOYXZpZ2F0aW9uRW5kYCBldmVudC5cbiAqIFdlIGFzc3VtZSB0aGF0IE5hdmlnYXRpb25FbmQgaXMgdGhlIGZpbmFsIHBhZ2UgcmVzb2x1dGlvbiBhbmQgY2FsbCBHQSBgcGFnZV92aWV3YCBjb21tYW5kLlxuICpcbiAqIFRvIGF2b2lkIGRvdWJsZSBiaW5kcywgd2UgYWxzbyBkZXN0cm95IHRoZSBzdWJzY3JpcHRpb24gd2hlbiBkZSBCb290c3RyYXAgQ29tcG9uZW50IGlzIGRlc3Ryb2llZC4gQnV0LCB3ZSBkb24ndCBrbm93IGZvciBzdXJlXG4gKiB0aGF0IHRoaXMgc3RyYXRlZ3kgZG9lcyBub3QgY2F1c2UgZG91YmxlIGJpbmQgb24gbXVsdGlwbGUgYm9vdHN0cmFwIGNvbXBvbmVudHMuXG4gKlxuICogV2UgYXJlIHVzaW5nIGRlIGNvbXBvbmVudCdzIGluamVjdG9yIHJlZmVyZW5jZSB0byByZXNvbHZlIFJvdXRlciwgc291IEkgaG9wZSB0aGVyZSBpcyBubyBwcm9ibGVtIHcvIGRvdWJsZSBiaW5nLlxuICpcbiAqIElmIHlvdSBoYXZlIHRoaXMgcHJvYmxlbSwgSSBlbmNvdXJhZ2Ugbm90IFVzZSBOZ3hHb29nbGVBbmFseXRpY3NSb3V0ZXJNb2R1bGUgYW5kIGF0YWNoIHRoZSBsaXN0ZW5lciBvbiBBcHBDb21wb25lbnQgaW5pdGlhbGl6YXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBHb29nbGVBbmFseXRpY3NSb3V0ZXJJbml0aWFsaXplcihcbiAgc2V0dGluZ3M6IElHb29nbGVBbmFseXRpY3NSb3V0aW5nU2V0dGluZ3MsXG4gIGdhU2VydmljZTogR29vZ2xlQW5hbHl0aWNzU2VydmljZVxuKSB7XG4gIHJldHVybiBhc3luYyAoYzogQ29tcG9uZW50UmVmPGFueT4pID0+IHtcbiAgICBjb25zdCByb3V0ZXIgPSBjLmluamVjdG9yLmdldChSb3V0ZXIpO1xuICAgIGNvbnN0IHsgaW5jbHVkZSA9IFtdLCBleGNsdWRlID0gW10gfSA9IHNldHRpbmdzID8/IHt9O1xuICAgIGNvbnN0IGluY2x1ZGVSdWxlcyA9IG5vcm1hbGl6ZVBhdGhSdWxlcyhpbmNsdWRlKTtcbiAgICBjb25zdCBleGNsdWRlUnVsZXMgPSBub3JtYWxpemVQYXRoUnVsZXMoZXhjbHVkZSk7XG4gICAgY29uc3Qgc3VicyA9IHJvdXRlclxuICAgICAgLmV2ZW50c1xuICAgICAgLnBpcGUoXG4gICAgICAgIGZpbHRlcigoZXZlbnQ6IE5hdmlnYXRpb25FbmQpID0+IGV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvbkVuZCksXG4gICAgICAgIHNraXAoMSksIC8vIFByZXZlbmQgZG91YmxlIHZpZXdzIG9uIHRoZSBmaXJzdCB0aWdnZXIgKGJlY2F1c2UgR0EgQWxyZWFkeSBzZW5kIG9uZSBwaW5nIG9uIHNldHVwKVxuICAgICAgICBmaWx0ZXIoZXZlbnQgPT4gaW5jbHVkZVJ1bGVzLmxlbmd0aCA+IDBcbiAgICAgICAgICA/IGluY2x1ZGVSdWxlcy5zb21lKHJ1bGUgPT4gcnVsZS50ZXN0KGV2ZW50LnVybEFmdGVyUmVkaXJlY3RzKSlcbiAgICAgICAgICA6IHRydWUpLFxuICAgICAgICBmaWx0ZXIoZXZlbnQgPT4gZXhjbHVkZVJ1bGVzLmxlbmd0aCA+IDBcbiAgICAgICAgICA/ICFleGNsdWRlUnVsZXMuc29tZShydWxlID0+IHJ1bGUudGVzdChldmVudC51cmxBZnRlclJlZGlyZWN0cykpXG4gICAgICAgICAgOiB0cnVlKVxuICAgICAgKVxuICAgICAgLnN1YnNjcmliZShldmVudCA9PiBnYVNlcnZpY2UucGFnZVZpZXcoZXZlbnQudXJsQWZ0ZXJSZWRpcmVjdHMsIHVuZGVmaW5lZCkpO1xuICAgIC8vIENsZWFudXBcbiAgICBjLm9uRGVzdHJveSgoKSA9PiBzdWJzLnVuc3Vic2NyaWJlKCkpO1xuICB9O1xufVxuXG4vKiogQ29udmVydHMgYWxsIHBhdGggcnVsZXMgZnJvbSBzdHJpbmcgdG8gUmVnZXggaW5zdGFuY2VzICovXG5mdW5jdGlvbiBub3JtYWxpemVQYXRoUnVsZXMocnVsZXM6IEFycmF5PHN0cmluZyB8IFJlZ0V4cD4pOiBBcnJheTxSZWdFeHA+IHtcbiAgcmV0dXJuIHJ1bGVzLm1hcChydWxlID0+IChydWxlIGluc3RhbmNlb2YgUmVnRXhwKVxuICAgID8gcnVsZVxuICAgIDogbmV3IFJlZ0V4cChgXiR7cnVsZS5yZXBsYWNlKCcqJywgJy4qJyl9JGAsICdpJykpO1xufVxuIl19