import { __awaiter } from "tslib";
import { APP_INITIALIZER, isDevMode } from '@angular/core';
import { NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN } from '../tokens/ngx-google-analytics-settings-token';
import { NGX_GTAG_FN } from '../tokens/ngx-gtag-token';
import { DOCUMENT } from '@angular/common';
/**
 * Provide a DI Configuration to attach GA Initialization at Angular Startup Cycle.
 */
export const NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER = {
    provide: APP_INITIALIZER,
    multi: true,
    useFactory: GoogleAnalyticsInitializer,
    deps: [
        NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,
        NGX_GTAG_FN,
        DOCUMENT
    ]
};
/**
 * Create a script element on DOM and link it to Google Analytics tracking code URI.
 * After that, execute exactly same init process as tracking snippet code.
 */
export function GoogleAnalyticsInitializer(settings, gtag, document) {
    return () => __awaiter(this, void 0, void 0, function* () {
        var _a;
        if (!settings.trackingCode) {
            if (!isDevMode()) {
                console.error('Empty tracking code for Google Analytics. Make sure to provide one when initializing NgxGoogleAnalyticsModule.');
            }
            return;
        }
        if (!gtag) {
            if (!isDevMode()) {
                console.error('Was not possible create or read gtag() fn. Make sure this module is running on a Browser w/ access to Window interface.');
            }
            return;
        }
        if (!document) {
            if (!isDevMode()) {
                console.error('Was not possible to access Document interface. Make sure this module is running on a Browser w/ access do Document interface.');
            }
        }
        // Set default ga.js uri
        settings.uri = settings.uri || `https://www.googletagmanager.com/gtag/js?id=${settings.trackingCode}`;
        // these commands should run first!
        settings.initCommands = (_a = settings === null || settings === void 0 ? void 0 : settings.initCommands) !== null && _a !== void 0 ? _a : [];
        // assert config command
        if (!settings.initCommands.find(x => x.command === 'config')) {
            settings.initCommands.unshift({ command: 'config', values: [settings.trackingCode] });
        }
        // assert js command
        if (!settings.initCommands.find(x => x.command === 'js')) {
            settings.initCommands.unshift({ command: 'js', values: [new Date()] });
        }
        for (const command of settings.initCommands) {
            gtag(command.command, ...command.values);
        }
        const s = document.createElement('script');
        s.async = true;
        s.src = settings.uri;
        if (settings.nonce) {
            s.setAttribute('nonce', settings.nonce);
        }
        const head = document.getElementsByTagName('head')[0];
        head.appendChild(s);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWFuYWx5dGljcy5pbml0aWFsaXplci5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZ29vZ2xlLWFuYWx5dGljcy9zcmMvIiwic291cmNlcyI6WyJsaWIvaW5pdGlhbGl6ZXJzL2dvb2dsZS1hbmFseXRpY3MuaW5pdGlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBWSxlQUFlLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBR3BHLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUV2RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFM0M7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSx5Q0FBeUMsR0FBYTtJQUNqRSxPQUFPLEVBQUUsZUFBZTtJQUN4QixLQUFLLEVBQUUsSUFBSTtJQUNYLFVBQVUsRUFBRSwwQkFBMEI7SUFDdEMsSUFBSSxFQUFFO1FBQ0osbUNBQW1DO1FBQ25DLFdBQVc7UUFDWCxRQUFRO0tBQ1Q7Q0FDRixDQUFDO0FBRUY7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLDBCQUEwQixDQUN4QyxRQUFrQyxFQUNsQyxJQUFZLEVBQ1osUUFBa0I7SUFFbEIsT0FBTyxHQUFTLEVBQUU7O1FBQ2hCLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFO1lBQzFCLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQkFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxnSEFBZ0gsQ0FBQyxDQUFDO2FBQ2pJO1lBRUQsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNULElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQkFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyx5SEFBeUgsQ0FBQyxDQUFDO2FBQzFJO1lBRUQsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNiLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRTtnQkFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQywrSEFBK0gsQ0FBQyxDQUFDO2FBQ2hKO1NBQ0Y7UUFFRCx3QkFBd0I7UUFDeEIsUUFBUSxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUMsR0FBRyxJQUFJLCtDQUErQyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFdEcsbUNBQW1DO1FBQ25DLFFBQVEsQ0FBQyxZQUFZLFNBQUcsUUFBUSxhQUFSLFFBQVEsdUJBQVIsUUFBUSxDQUFFLFlBQVksbUNBQUksRUFBRSxDQUFDO1FBRXJELHdCQUF3QjtRQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxLQUFLLFFBQVEsQ0FBQyxFQUM1RDtZQUNFLFFBQVEsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBRSxRQUFRLENBQUMsWUFBWSxDQUFFLEVBQUUsQ0FBQyxDQUFBO1NBQ3hGO1FBRUQsb0JBQW9CO1FBQ3BCLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEtBQUssSUFBSSxDQUFDLEVBQ3hEO1lBQ0UsUUFBUSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFFLElBQUksSUFBSSxFQUFFLENBQUUsRUFBRSxDQUFDLENBQUE7U0FDekU7UUFFRCxLQUFLLE1BQU0sT0FBTyxJQUFJLFFBQVEsQ0FBQyxZQUFZLEVBQUU7WUFDM0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDMUM7UUFFRCxNQUFNLENBQUMsR0FBc0IsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM5RCxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNmLENBQUMsQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQztRQUVyQixJQUFJLFFBQVEsQ0FBQyxLQUFLLEVBQUU7WUFDbEIsQ0FBQyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3pDO1FBRUQsTUFBTSxJQUFJLEdBQW9CLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2RSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RCLENBQUMsQ0FBQSxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb3ZpZGVyLCBBUFBfSU5JVElBTElaRVIsIGlzRGV2TW9kZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdYX0dPT0dMRV9BTkFMWVRJQ1NfU0VUVElOR1NfVE9LRU4gfSBmcm9tICcuLi90b2tlbnMvbmd4LWdvb2dsZS1hbmFseXRpY3Mtc2V0dGluZ3MtdG9rZW4nO1xuaW1wb3J0IHsgSUdvb2dsZUFuYWx5dGljc1NldHRpbmdzIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9pLWdvb2dsZS1hbmFseXRpY3Mtc2V0dGluZ3MnO1xuaW1wb3J0IHsgSUdvb2dsZUFuYWx5dGljc0NvbW1hbmQgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2ktZ29vZ2xlLWFuYWx5dGljcy1jb21tYW5kJztcbmltcG9ydCB7IE5HWF9HVEFHX0ZOIH0gZnJvbSAnLi4vdG9rZW5zL25neC1ndGFnLXRva2VuJztcbmltcG9ydCB7IEd0YWdGbiB9IGZyb20gJy4uL3R5cGVzL2d0YWcudHlwZSc7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbi8qKlxuICogUHJvdmlkZSBhIERJIENvbmZpZ3VyYXRpb24gdG8gYXR0YWNoIEdBIEluaXRpYWxpemF0aW9uIGF0IEFuZ3VsYXIgU3RhcnR1cCBDeWNsZS5cbiAqL1xuZXhwb3J0IGNvbnN0IE5HWF9HT09HTEVfQU5BTFlUSUNTX0lOSVRJQUxJWkVSX1BST1ZJREVSOiBQcm92aWRlciA9IHtcbiAgcHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLFxuICBtdWx0aTogdHJ1ZSxcbiAgdXNlRmFjdG9yeTogR29vZ2xlQW5hbHl0aWNzSW5pdGlhbGl6ZXIsXG4gIGRlcHM6IFtcbiAgICBOR1hfR09PR0xFX0FOQUxZVElDU19TRVRUSU5HU19UT0tFTixcbiAgICBOR1hfR1RBR19GTixcbiAgICBET0NVTUVOVFxuICBdXG59O1xuXG4vKipcbiAqIENyZWF0ZSBhIHNjcmlwdCBlbGVtZW50IG9uIERPTSBhbmQgbGluayBpdCB0byBHb29nbGUgQW5hbHl0aWNzIHRyYWNraW5nIGNvZGUgVVJJLlxuICogQWZ0ZXIgdGhhdCwgZXhlY3V0ZSBleGFjdGx5IHNhbWUgaW5pdCBwcm9jZXNzIGFzIHRyYWNraW5nIHNuaXBwZXQgY29kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEdvb2dsZUFuYWx5dGljc0luaXRpYWxpemVyKFxuICBzZXR0aW5nczogSUdvb2dsZUFuYWx5dGljc1NldHRpbmdzLFxuICBndGFnOiBHdGFnRm4sXG4gIGRvY3VtZW50OiBEb2N1bWVudFxuKSB7XG4gIHJldHVybiBhc3luYyAoKSA9PiB7XG4gICAgaWYgKCFzZXR0aW5ncy50cmFja2luZ0NvZGUpIHtcbiAgICAgIGlmICghaXNEZXZNb2RlKCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRW1wdHkgdHJhY2tpbmcgY29kZSBmb3IgR29vZ2xlIEFuYWx5dGljcy4gTWFrZSBzdXJlIHRvIHByb3ZpZGUgb25lIHdoZW4gaW5pdGlhbGl6aW5nIE5neEdvb2dsZUFuYWx5dGljc01vZHVsZS4nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZ3RhZykge1xuICAgICAgaWYgKCFpc0Rldk1vZGUoKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdXYXMgbm90IHBvc3NpYmxlIGNyZWF0ZSBvciByZWFkIGd0YWcoKSBmbi4gTWFrZSBzdXJlIHRoaXMgbW9kdWxlIGlzIHJ1bm5pbmcgb24gYSBCcm93c2VyIHcvIGFjY2VzcyB0byBXaW5kb3cgaW50ZXJmYWNlLicpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFkb2N1bWVudCkge1xuICAgICAgaWYgKCFpc0Rldk1vZGUoKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdXYXMgbm90IHBvc3NpYmxlIHRvIGFjY2VzcyBEb2N1bWVudCBpbnRlcmZhY2UuIE1ha2Ugc3VyZSB0aGlzIG1vZHVsZSBpcyBydW5uaW5nIG9uIGEgQnJvd3NlciB3LyBhY2Nlc3MgZG8gRG9jdW1lbnQgaW50ZXJmYWNlLicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNldCBkZWZhdWx0IGdhLmpzIHVyaVxuICAgIHNldHRpbmdzLnVyaSA9IHNldHRpbmdzLnVyaSB8fCBgaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RhZy9qcz9pZD0ke3NldHRpbmdzLnRyYWNraW5nQ29kZX1gO1xuXG4gICAgLy8gdGhlc2UgY29tbWFuZHMgc2hvdWxkIHJ1biBmaXJzdCFcbiAgICBzZXR0aW5ncy5pbml0Q29tbWFuZHMgPSBzZXR0aW5ncz8uaW5pdENvbW1hbmRzID8/IFtdO1xuXG4gICAgLy8gYXNzZXJ0IGNvbmZpZyBjb21tYW5kXG4gICAgaWYgKCFzZXR0aW5ncy5pbml0Q29tbWFuZHMuZmluZCh4ID0+IHguY29tbWFuZCA9PT0gJ2NvbmZpZycpKVxuICAgIHtcbiAgICAgIHNldHRpbmdzLmluaXRDb21tYW5kcy51bnNoaWZ0KHsgY29tbWFuZDogJ2NvbmZpZycsIHZhbHVlczogWyBzZXR0aW5ncy50cmFja2luZ0NvZGUgXSB9KVxuICAgIH1cblxuICAgIC8vIGFzc2VydCBqcyBjb21tYW5kXG4gICAgaWYgKCFzZXR0aW5ncy5pbml0Q29tbWFuZHMuZmluZCh4ID0+IHguY29tbWFuZCA9PT0gJ2pzJykpXG4gICAge1xuICAgICAgc2V0dGluZ3MuaW5pdENvbW1hbmRzLnVuc2hpZnQoeyBjb21tYW5kOiAnanMnLCB2YWx1ZXM6IFsgbmV3IERhdGUoKSBdIH0pXG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBjb21tYW5kIG9mIHNldHRpbmdzLmluaXRDb21tYW5kcykge1xuICAgICAgZ3RhZyhjb21tYW5kLmNvbW1hbmQsIC4uLmNvbW1hbmQudmFsdWVzKTtcbiAgICB9XG5cbiAgICBjb25zdCBzOiBIVE1MU2NyaXB0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgIHMuYXN5bmMgPSB0cnVlO1xuICAgIHMuc3JjID0gc2V0dGluZ3MudXJpO1xuXG4gICAgaWYgKHNldHRpbmdzLm5vbmNlKSB7XG4gICAgICBzLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBzZXR0aW5ncy5ub25jZSk7XG4gICAgfVxuXG4gICAgY29uc3QgaGVhZDogSFRNTEhlYWRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiAgICBoZWFkLmFwcGVuZENoaWxkKHMpO1xuICB9O1xufVxuIl19